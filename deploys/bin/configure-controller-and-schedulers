#!/usr/bin/env python3
#
# Copyright (c) 2017 ISPRAS (http://www.ispras.ru)
# Institute for System Programming of the Russian Academy of Sciences
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import json
import os
import subprocess


def execute_cmd(*args, stdin=None, get_output=False):
    print('Execute command "{0}"'.format(' '.join(args)))
    if get_output:
        return subprocess.check_output(args, stdin=stdin).decode('utf8')
    else:
        subprocess.check_call(args, stdin=stdin)


def get_klever_addon_abs_path(name, verification_backend=False):
    klever_addon_desc = klever_conf['Klever Addons']['Verification Backends'][name] \
        if verification_backend is True else klever_conf['Klever Addons'][name]
    return os.path.abspath(os.path.join('klever-addons', 'verification-backends' if verification_backend else '', name,
                                        klever_addon_desc.get('executable path', '')))


print('Read Klever configuration')
with open('klever.json') as fp:
    klever_conf = json.load(fp)


print('Configure Klever Controller')
with open('klever/scheduler/conf/controller.json') as fp:
    controller_conf = json.load(fp)

controller_conf['common']['working directory'] = '/home/debian/klever-work/controller'
controller_conf['Klever Bridge'].update({
    'user': 'service',
    'password': 'service'
})
controller_conf['client-controller']['consul'] = get_klever_addon_abs_path('Consul')

with open('klever-conf/controller.json', 'w') as fp:
    json.dump(controller_conf, fp, sort_keys=True, indent=4)


print('Configure Klever NativeScheduler')
with open('klever/scheduler/conf/native-scheduler.json') as fp:
    native_scheduler_conf = json.load(fp)

native_scheduler_conf['common']['working directory'] = '/home/debian/klever-work/native-scheduler'
native_scheduler_conf['Klever Bridge'].update({
    'user': 'service',
    'password': 'service'
})
native_scheduler_conf['scheduler'].update({
    'disable CPU cores account': True,
    'job client configuration': os.path.abspath('klever-conf/native-scheduler-job-client.json'),
    'task client configuration': os.path.abspath('klever-conf/native-scheduler-task-client.json')
})

with open('klever-conf/native-scheduler.json', 'w') as fp:
    json.dump(native_scheduler_conf, fp, sort_keys=True, indent=4)


print('Configure Klever NativeScheduler Job Worker')
with open('klever/scheduler/conf/job-client.json') as fp:
    job_client_conf = json.load(fp)

job_client_conf['client'] = {
    'benchexec location': get_klever_addon_abs_path('BenchExec'),
    'cif location': get_klever_addon_abs_path('CIF'),
    'cil location': get_klever_addon_abs_path('CIL')
}

with open('klever-conf/native-scheduler-job-client.json', 'w') as fp:
    json.dump(job_client_conf, fp, sort_keys=True, indent=4)


print('Configure Klever NativeScheduler Task Worker')
with open('klever/scheduler/conf/task-client.json') as fp:
    task_client_conf = json.load(fp)

task_client_conf['client']['benchexec location'] = get_klever_addon_abs_path('BenchExec')
verification_backends = task_client_conf['client']['verification tools'] = {}

for name, desc in klever_conf['Klever Addons']['Verification Backends'].items():
    if desc['name'] not in verification_backends:
        verification_backends[desc['name']] = {}
    verification_backends[desc['name']][desc['version']] = get_klever_addon_abs_path(name, verification_backend=True)

with open('klever-conf/native-scheduler-task-client.json', 'w') as fp:
    json.dump(task_client_conf, fp, sort_keys=True, indent=4)
