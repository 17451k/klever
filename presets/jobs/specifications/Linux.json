{
  "templates": {
    "loadable kernel modules and kernel subsystems": {
      "plugins": [
        {
          "EMG": {
            "entry point": "main",
            "initialize requirements": true,
            "check final state": true,
            "source analysis": {
              "callstack deep search": 3,
              "macros white list": "linux/emg/macros white list.json"
            },
            "intermediate model options": [
              {
                "linuxModule": {
                  "dump instances": false,
                  "convert statics to globals": true,
                  "add registration guards": true,
                  "ignore missed callbacks": true,
                  "delete unregistered processes": true,
                  "implicit callback calls": true,
                  "generate new resource interfaces": false,
                  "callback comment": "Invoke callback {0} from {1}.",
                  "action comments": {
                    "dispatch": {
                      "register": "Register {} callbacks.",
                      "instance_register": "Register {} callbacks.",
                      "deregister": "Deregister {} callbacks.",
                      "instance_deregister": "Deregister {} callbacks.",
                      "irq_register": "Register {} interrupt handler.",
                      "irq_deregister": "Deregister {} interrupt handler."
                    },
                    "receive": {
                      "register": "Begin {} callbacks invocations scenario.",
                      "instance_register": "Begin {} callbacks invocations scenario.",
                      "deregister": "Finish {} callbacks invocations scenario.",
                      "instance_deregister": "Finish {} callbacks invocations scenario."
                    }
                  }
                }
              },
              {
                "linuxInsmod": {
                  "init": "module_init",
                  "exit": "module_exit",
                  "kernel_initialization": [
                    "early_initcall",
                    "pure_initcall",
                    "core_initcall",
                    "core_initcall_sync",
                    "postcore_initcall",
                    "postcore_initcall_sync",
                    "arch_initcall",
                    "arch_initcall_sync",
                    "subsys_initcall",
                    "subsys_initcall_sync",
                    "fs_initcall",
                    "fs_initcall_sync",
                    "rootfs_initcall",
                    "device_initcall",
                    "device_initcall_sync",
                    "late_initcall",
                    "late_initcall_sync",
                    "console_initcall",
                    "security_initcall"
                  ],
                  "kernel": false
                }
              },
              {
                "genericManual": {"enforce replacement": true}
              }
            ],
            "translation options": {
              "debug output": false,
              "self parallel processes": false,
              "self parallel model": false,
              "always sequential processes": ["linux/initialization"],
              "direct control functions calls": true,
              "nested automata": true,
              "allocate with sizeof": true,
              "allocate external": false,
              "environment model file": "environment_model.c",
              "code additional aspects": [],
              "additional headers": [
                "linux/ldv/common.h",
                "linux/ldv/err.h",
                "verifier/common.h",
                "verifier/gcc.h",
                "verifier/nondet.h",
                "verifier/memory.h",
                "verifier/thread.h"
              ]
            }
          }
        },
        {
          "RSG": {
            "common sets model": "counter",
            "opts file": "scripts/mod/empty.c",
            "common models": [
              "linux/drivers/base/dd.c",
              "linux/drivers/spi.c",
              "linux/mm/slab.c",
              "linux/err.c",
              "linux/kernel/panic.c",
              "linux/arch/atomic.c",
              "linux/ldv/common.c",
              "verifier/common.c",
              "verifier/gcc.c",
              "verifier/nondet.c",
              "verifier/reference memory.c",
              "linux/verifier/memory.c"
            ]
          }
        },
        "Weaver",
        {
          "FVTP": {
            "merge source files": true,
            "verifier profile": "reachability",
            "verifier": {
              "name": "CPAchecker",
              "version": "trunk:31140"
            },
            "result processing": {
              "coverage": "lightweight",
              "collect function names": true
            }
          }
        }
      ]
    },
    "argument signatures for loadable kernel modules and kernel subsystems": {
      "template": "loadable kernel modules and kernel subsystems",
      "plugins": [
        "EMG",
        {
          "ASE": {"algorithm": "COMPLEX_ID"}
        },
        "TR",
        "RSG",
        "Weaver",
        "FVTP"
      ]
    }
  },
  "requirements": {
    "description": "Linux specifications",
    "template": "loadable kernel modules and kernel subsystems",
    "alloc": {
      "irq": {
        "description": "...",
        "RSG": {"models": ["linux/alloc/irq.c"]}
      },
      "spinlock": {
        "template": "argument signatures for loadable kernel modules and kernel subsystems",
        "ASE": {"request aspects": ["linux/kernel/locking/spinlock.request.aspect"]},
        "TR": {"templates": [
          "linux/kernel/locking/spinlock.c.tmpl",
          "linux/kernel/locking/spinlock.aspect.tmpl"
        ]},
        "RSG": {"models": [
          {"$linux/kernel/locking/spinlock.c": {"sets model": "flag"}},
          "linux/alloc/spinlock.c"
        ]}
      },
      "usb lock": {
        "description": "...",
        "RSG": {"models": ["linux/alloc/usb lock.c"]}
      }
    },
    "arch": {"io": {
      "description": "...",
      "RSG": {"models": ["linux/arch/io.c"]}
    }},
    "block": {
      "genhd": {
        "description": "...",
        "RSG": {"models": ["linux/block/genhd.c"]}
      },
      "queue": {
        "description": "...",
        "RSG": {"models": ["linux/block/queue.c"]}
      },
      "request": {
        "description": "...",
        "template": "loadable kernel modules and kernel subsystems",
        "RSG": {"models": ["linux/block/request.c"]}
      }
    },
    "concurrency safety": {
      "description": "Linux concurrency safety",
      "EMG": {
        "entry point": "main",
        "initialize requirements": true,
        "check final state": false,
        "source analysis": {
          "callstack deep search": 3,
          "macros white list": "linux/emg/macros white list.json"
        },
        "intermediate model options": [
          {
            "linuxModule": {
              "dump instances": false,
              "convert statics to globals": true,
              "add registration guards": false,
              "ignore missed callbacks": true,
              "delete unregistered processes": true,
              "implicit callback calls": true,
              "generate new resource interfaces": false,
              "callback comment": "Invoke callback {0} from {1}.",
              "action comments": {
                "dispatch": {
                  "register": "Register {} callbacks.",
                  "instance_register": "Register {} callbacks.",
                  "deregister": "Deregister {} callbacks.",
                  "instance_deregister": "Deregister {} callbacks.",
                  "irq_register": "Register {} interrupt handler.",
                  "irq_deregister": "Deregister {} interrupt handler."
                },
                "receive": {
                  "register": "Begin {} callbacks invocations scenario.",
                  "instance_register": "Begin {} callbacks invocations scenario.",
                  "deregister": "Finish {} callbacks invocations scenario.",
                  "instance_deregister": "Finish {} callbacks invocations scenario."
                }
              }
            }
          },
          {
            "linuxInsmod": {
              "init": "module_init",
              "exit": "module_exit",
              "kernel_initialization": [
                "early_initcall",
                "pure_initcall",
                "core_initcall",
                "core_initcall_sync",
                "postcore_initcall",
                "postcore_initcall_sync",
                "arch_initcall",
                "arch_initcall_sync",
                "subsys_initcall",
                "subsys_initcall_sync",
                "fs_initcall",
                "fs_initcall_sync",
                "rootfs_initcall",
                "device_initcall",
                "device_initcall_sync",
                "late_initcall",
                "late_initcall_sync",
                "console_initcall",
                "security_initcall"
              ],
              "kernel": false
            }
          },
          {
            "genericManual": {"enforce replacement": true}
          }
        ],
        "translation options": {
          "debug output": false,
          "self parallel processes": true,
          "self parallel model": false,
          "do not skip signals": true,
          "not self parallel processes": ["linux/initialization"],
          "not self parallel processes from categories": ["usb"],
          "not self parallel processes from scenarios": ["usb_serial_scenario"],
          "direct control functions calls": false,
          "nested automata": true,
          "allocate with sizeof": true,
          "allocate external": false,
          "environment model file": "environment_model.c",
          "code additional aspects": [],
          "additional headers": [
            "linux/ldv/common.h",
            "linux/ldv/err.h",
            "verifier/common.h",
            "verifier/gcc.h",
            "verifier/nondet.h",
            "verifier/memory.h",
            "verifier/thread.h"
          ]
        }
      },
      "RSG": {"models": ["linux/concurrency safety/synchronization primitives.c"]},
      "FVTP": {
        "verifier profile": "race checking",
        "verifier": {
          "name": "CPAchecker",
          "version": "CPALockator-combat-mode:28916"
        },
        "result processing": {
          "expect several witnesses": true
        }
      }
    },
    "drivers": {
      "base": {
        "class": {
          "description": "...",
          "RSG": {"models": ["linux/drivers/base/class.c"]}
        },
        "dma-mapping": {
          "description": "...",
          "RSG": {"models": ["linux/drivers/base/dma-mapping.c"]}
        }
      },
      "clk1": {
        "description": "...",
        "template": "argument signatures for loadable kernel modules and kernel subsystems",
        "ASE": {"request aspects": {"linux/drivers/clk1.request.aspect": {}}},
        "TR": {"templates": [
          "linux/drivers/clk1.c.tmpl",
          "linux/drivers/clk1.aspect.tmpl"
        ]},
        "RSG": {"models": ["$linux/drivers/clk1.c"]}
      },
      "clk2": {
        "description": "...",
        "template": "argument signatures for loadable kernel modules and kernel subsystems",
        "ASE": {"request aspects": ["linux/drivers/clk2.request.aspect"]},
        "TR": {"templates": [
          "linux/drivers/clk2.c.tmpl",
          "linux/drivers/clk2.aspect.tmpl"
        ]},
        "RSG": {"models": ["$linux/drivers/clk2.c"]}
      }
    },
    "empty": {
      "description": "..."
    },
    "fs": {"sysfs": {
      "description": "...",
      "RSG": {"models": ["linux/fs/sysfs.c"]}
    }},
    "kernel": {
      "locking": {
        "mutex": {
          "description": "...",
          "template": "argument signatures for loadable kernel modules and kernel subsystems",
          "ASE": {"request aspects": ["linux/kernel/locking/mutex.request.aspect"]},
          "TR": {"templates": [
            "linux/kernel/locking/mutex.c.tmpl",
            "linux/kernel/locking/mutex.aspect.tmpl"
          ]},
          "RSG": {"models": [{"$linux/kernel/locking/mutex.c": {"sets model": "flag"}}]}
        },
        "rwlock": {
          "description": "...",
          "RSG": {"models": ["linux/kernel/locking/rwlock.c"]}
        },
        "spinlock": {
          "description": "...",
          "template": "argument signatures for loadable kernel modules and kernel subsystems",
          "ASE": {"request aspects": ["linux/kernel/locking/spinlock.request.aspect"]},
          "TR": {"templates": [
            "linux/kernel/locking/spinlock.c.tmpl",
            "linux/kernel/locking/spinlock.aspect.tmpl"
          ]},
          "RSG": {"models": [{"$linux/kernel/locking/spinlock.c": {"sets model": "flag"}}]}
        }
      },
      "module": {
        "description": "...",
        "RSG": {"models": ["linux/kernel/module.c"]}
      },
      "rcu": {
        "update": {
          "lock bh": {
            "description": "...",
            "RSG": {"models": ["linux/kernel/rcu/update/lock bh.c"]}
          },
          "lock sched": {
            "description": "...",
            "RSG": {"models": ["linux/kernel/rcu/update/lock sched.c"]}
          },
          "lock": {
            "description": "...",
            "RSG": {"models": ["linux/kernel/rcu/update/lock.c"]}
          }
        },
        "srcu": {
          "description": "...",
          "RSG": {"models": ["linux/kernel/rcu/srcu.c"]}
        }
      },
      "sched": {"completion": {
        "description": "...",
        "template": "argument signatures for loadable kernel modules and kernel subsystems",
        "ASE": {"request aspects": ["linux/kernel/sched/completion.request.aspect"]},
        "TR": {"templates": [
          "linux/kernel/sched/completion.c.tmpl",
          "linux/kernel/sched/completion.aspect.tmpl"
        ]},
        "RSG": {"models": ["$linux/kernel/sched/completion.c"]}
      }}
    },
    "lib": {
      "find_bit": {
        "description": "...",
        "RSG": {"models": ["linux/lib/find_bit.c"]}
      },
      "idr": {
        "description": "...",
        "template": "argument signatures for loadable kernel modules and kernel subsystems",
        "ASE": {"request aspects": ["linux/lib/idr.request.aspect"]},
        "TR": {"templates": [
          "linux/lib/idr.c.tmpl",
          "linux/lib/idr.aspect.tmpl"
        ]},
        "RSG": {"models": ["$linux/lib/idr.c"]}
      }
    },
    "memory safety": {
      "description": "Linux memory safety",
      "EMG" : {
        "entry point": "main",
        "initialize requirements": true,
        "check final state": true,
        "source analysis": {
          "callstack deep search": 3,
          "macros white list": "linux/emg/macros white list.json"
        },
        "intermediate model options": [
          {
            "linuxModule": {
              "dump instances": false,
              "convert statics to globals": true,
              "add registration guards": true,
              "ignore missed callbacks": true,
              "delete unregistered processes": true,
              "implicit callback calls": true,
              "generate new resource interfaces": false,
              "callback comment": "Invoke callback {0} from {1}.",
              "action comments": {
                "dispatch": {
                  "register": "Register {} callbacks.",
                  "instance_register": "Register {} callbacks.",
                  "deregister": "Deregister {} callbacks.",
                  "instance_deregister": "Deregister {} callbacks.",
                  "irq_register": "Register {} interrupt handler.",
                  "irq_deregister": "Deregister {} interrupt handler."
                },
                "receive": {
                  "register": "Begin {} callbacks invocations scenario.",
                  "instance_register": "Begin {} callbacks invocations scenario.",
                  "deregister": "Finish {} callbacks invocations scenario.",
                  "instance_deregister": "Finish {} callbacks invocations scenario."
                }
              }
            }
          },
          {
            "linuxInsmod": {
              "init": "module_init",
              "exit": "module_exit",
              "kernel_initialization": [
                "early_initcall",
                "pure_initcall",
                "core_initcall",
                "core_initcall_sync",
                "postcore_initcall",
                "postcore_initcall_sync",
                "arch_initcall",
                "arch_initcall_sync",
                "subsys_initcall",
                "subsys_initcall_sync",
                "fs_initcall",
                "fs_initcall_sync",
                "rootfs_initcall",
                "device_initcall",
                "device_initcall_sync",
                "late_initcall",
                "late_initcall_sync",
                "console_initcall",
                "security_initcall"
              ],
              "kernel": false
            }
          },
          {
            "genericManual": {"enforce replacement": true}
          }
        ],
        "translation options": {
          "debug output": false,
          "self parallel processes": false,
          "self parallel model": false,
          "always sequential processes": ["linux/initialization"],
          "direct control functions calls": true,
          "nested automata": true,
          "allocate with sizeof": true,
          "allocate external": true,
          "environment model file": "environment_model.c",
          "code additional aspects": [],
          "additional headers": [
            "linux/user_namespace.h",
            "linux/ldv/common.h",
            "linux/ldv/err.h",
            "verifier/common.h",
            "verifier/gcc.h",
            "verifier/nondet.h",
            "verifier/memory.h",
            "verifier/thread.h"
          ]
        }
      },
      "RSG": {"models": ["linux/memory safety/memory.c"]},
      "FVTP": {
        "verifier profile": "memory checking Linux64",
        "verifier": {
          "name": "CPAchecker",
          "version": "trunk:31140"
        }
      }
    },
    "net": {
      "register": {
        "description": "Error handling for netdev in probe()",
        "RSG": {"models": ["linux/net/register.c"]}
      },
      "rtnetlink": {
        "description": "...",
        "RSG": {"models": ["linux/net/rtnetlink.c"]}
      },
      "sock": {
        "description": "...",
        "RSG": {"models": ["linux/net/sock.c"]}
      }
    },
    "test": {
      "environment model specifications": {
        "description": "Requirement intended for testing environment model specifications and the generator",
        "RSG": {"models": ["linux/emg/test_model.c"]}
      },
      "environment model specifications with function pointer analysis": {
        "description": "Requirement intended for testing environment model specifications and generator with function pointer analysis",
        "RSG": {"models": ["linux/emg/test_model.c"]},
        "FVTP": {
          "verifier profile": "reachability with function pointers",
          "verifier": {
            "name": "CPAchecker",
            "version": "trunk:31140"
          }
        }
      },
      "common": {
        "description": "...",
        "template": "loadable kernel modules and kernel subsystems"
      }
    },
    "staging": {
      "alloc": {
        "description": "...",
        "RSG": {"models": ["linux/alloc/memory.c"]}
      },
      "fs:char_dev": {
        "description": "...",
        "RSG": {"models": ["linux/fs/char_dev.c"]}
      },
      "mmc:sdio_func": {
        "description": "...",
        "RSG": {"models": ["linux/mmc/sdio_func.c"]}
      }
    },
    "usb": {
      "coherent": {
        "description": "...",
        "RSG": {"models": ["linux/usb/coherent.c"]}
      },
      "dev": {
        "description": "...",
        "RSG": {"models": ["linux/usb/dev.c"]}
      },
      "gadget": {
        "description": "...",
        "RSG": {"models": ["linux/usb/gadget.c"]}
      },
      "register": {
        "description": "Error handling for usb register in probe()",
        "RSG": {"models": ["linux/usb/register.c"]}
      },
      "urb": {
        "description": "...",
        "RSG": {"models": ["linux/usb/urb.c"]}
      }
    }
  }
}
