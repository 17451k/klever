{
  "2.6.33": {
    "functions models": {
      "get_sb_nodev, get_sb_single, get_sb_ns": {
        "comment": "Call fill_super implementation.",
        "reference": true,
        "labels": {
          "file_system_type": {
            "container": true,
            "parameter": true,
            "interface": [
              "super.file_system_type"
            ]
          },
          "super_block": {
            "container": true,
            "pointer": true,
            "interface": [
              "super.super_block"
            ]
          }
        },
        "process": "<call>",
        "actions": {
          "call": {
            "comment": "Alloc memory for super block and fill it.",
            "statements": [
              "int ret;",
              "%super_block% = ldv_xzalloc(sizeof(struct super_block));",
              "%super_block%->s_type = %file_system_type%;",
              "ret = $ARG4(%super_block%, $ARG3, $ARG2 & MS_SILENT ? 1 : 0);",
              "if (ret != 0) ",
              "   ldv_free(%super_block%);",
              "return ret;"
            ]
          }
        }
      },
      "get_sb_bdev": {
        "comment": "Call fill_super implementation.",
        "reference": true,
        "labels": {
          "file_system_type": {
            "container": true,
            "parameter": true,
            "interface": [
              "super.file_system_type"
            ]
          },
          "super_block": {
            "container": true,
            "pointer": true,
            "interface": [
              "super.super_block"
            ]
          }
        },
        "process": "<call>",
        "actions": {
          "call": {
            "comment": "Alloc memory for super block and fill it.",
            "statements": [
              "int ret;",
              "%super_block% = ldv_xzalloc(sizeof(struct super_block));",
              "%super_block%->s_type = %file_system_type%;",
              "ret = $ARG5(%super_block%, $ARG4, $ARG2 & MS_SILENT ? 1 : 0);",
              "if (ret != 0) ",
              "   ldv_free(%super_block%);",
              "return ret;"
            ]
          }
        }
      },
      "register_filesystem": {
        "comment": "Register a new filesystem.",
        "reference": true,
        "labels": {
          "file_system_type": {
            "container": true,
            "parameter": true,
            "interface": [
              "super.file_system_type"
            ]
          }
        },
        "process": "<assign>.[register].<success> | <fail>",
        "actions": {
          "register": {
            "parameters": [
              "%file_system_type%"
            ]
          },
          "assign": {
            "comment": "Get callbacks to register provided within 'file_system_type' argument.",
            "statements": [
              "%file_system_type% = $ARG1;"
            ]
          },
          "fail": {
            "comment": "Fail a new filesystem registration.",
            "statements": [
              "return ldv_undef_int_negative();"
            ]
          },
          "success": {
            "comment": "Registration of file_system_type callbacks has been finished successfully.",
            "statements": [
              "return 0;"
            ]
          }
        }
      },
      "unregister_filesystem": {
        "comment": "Deregister a new filesystem.",
        "reference": true,
        "labels": {
          "file_system_type": {
            "container": true,
            "parameter": true,
            "interface": [
              "super.file_system_type"
            ]
          }
        },
        "process": "<assign>.[deregister]",
        "actions": {
          "deregister": {
            "parameters": [
              "%file_system_type%"
            ]
          },
          "assign": {
            "comment": "Get callbacks to deregister provided within 'file_system_type' argument.",
            "statements": [
              "%file_system_type% = $ARG1;"
            ]
          }
        }
      }
    },
    "environment processes": {
      "filesystem_type": {
        "comment": "Super block scenario.",
        "reference": true,
        "headers": [
          "linux/fs.h"
        ],
        "labels": {
          "file_system_type": {
            "container": true,
            "interface": [
              "super.file_system_type"
            ]
          },
          "super_ops": {
            "container": true,
            "pointer": true,
            "interface": [
              "super.super_operations"
            ]
          },
          "block": {
            "container": true,
            "interface": [
              "super.super_block"
            ]
          },
          "resource": {
            "resource": true,
            "interface": [
              "super.inode"
            ]
          },
          "callback": {
            "callback": true
          },
          "ret": {
            "declaration": "int a",
            "value": "ldv_undef_int()"
          }
        },
        "process": "(!register).{main}",
        "actions": {
          "main": {
            "comment": "Going to initialize super block.",
            "process": "[probe].(<probe_success>.{call} | <probe_fail>.{main}) | (deregister)"
          },
          "call": {
            "comment": "Super block is created.",
            "process": "[callback].{call} | [put].[release].{main}"
          },
          "register": {
            "parameters": [
              "%file_system_type%"
            ]
          },
          "deregister": {
            "condition": [
              "%file_system_type% == $ARG1"
            ],
            "parameters": [
              "%file_system_type%"
            ]
          },
          "callback": {
            "callback": "%callback%",
            "parameters": [
              "%resource%"
            ]
          },
          "put": {
            "comment": "Put super block.",
            "callback": "%super_ops.put%",
            "parameters": [
              "%block%"
            ]
          },
          "release": {
            "comment": "Release super block.",
            "callback": "%file_system_type.release%",
            "parameters": [
              "%block%"
            ]
          },
          "probe": {
            "comment": "Allocate super block.",
            "callback": "%file_system_type.probe%",
            "parameters": [],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_filter_err_code(%ret%);"
            ]
          },
          "probe_success": {
            "comment": "Device file is opened successfully.",
            "condition": [
              "%ret% == 0"
            ],
            "statements": [
              "%block% = container_of(%file_system_type%, struct super_block, s_type);",
              "%super_ops% = %block%->s_op;"
            ]
          },
          "probe_fail": {
            "comment": "Failed to open devices file.",
            "condition": [
              "%ret% != 0"
            ]
          }
        }
      }
    }
  }
}