#!/usr/bin/env python3
#
# Copyright (c) 2018 ISP RAS (http://www.ispras.ru)
# Ivannikov Institute for System Programming of the Russian Academy of Sciences
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import json
import sys
import consulate
import subprocess
import logging

sys.path.append(os.path.join(os.path.dirname(__file__), os.path.pardir))
import utils.bridge as bridge


def set_status(logger, st):
    session = bridge.Session(logger, conf["Klever Bridge"]["name"], conf["Klever Bridge"]["user"],
                             conf["Klever Bridge"]["password"])

    for scheduler, status in st.items():
        session.json_exchange("service/scheduler/{0}/".format(scheduler), data={'status': status}, method='PATCH')

    session.sign_out()


expect_file = os.environ["CONTROLLER_NODE_CONFIG"]
with open(expect_file, encoding="utf8") as fh:
    conf = json.load(fh)

# Sign in
consul = consulate.Consul()

# Update scheduler status
status = {
    "VerifierCloud": "DISCONNECTED",
    "Klever": "DISCONNECTED"
}

ks_out = subprocess.getoutput('ps -aux | grep [n]ative-scheduler')
if ks_out and ks_out != '':
    status["Klever"] = "HEALTHY"
vc_out = subprocess.getoutput('ps -aux | grep [v]erifiercloud-scheduler')
if vc_out and vc_out != '':
    status["VerifierCloud"] = "HEALTHY"

# Check the last submit
if "schedulers" in consul.kv:
    kv_status = json.loads(consul.kv["schedulers"])
    if kv_status["Klever"] != status["Klever"] or kv_status["VerifierCloud"] != status["VerifierCloud"]:
        set_status(logging, status)
        consul.kv["schedulers"] = json.dumps(status, ensure_ascii=False, sort_keys=True, indent=4)
else:
    try:
        consul.kv["schedulers"] = json.dumps(status, ensure_ascii=False, sort_keys=True, indent=4)
    except (AttributeError, KeyError):
        print('Key-value storage is not ready yet')
        exit(1)
    set_status(logging, status)

# Sign out
exit(0)
