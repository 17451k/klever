#!/usr/bin/env python3
#
# Copyright (c) 2014-2016 ISPRAS (http://www.ispras.ru)
# Institute for System Programming of the Russian Academy of Sciences
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import json
import argparse
import logging
import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), os.path.pardir))
os.environ['PYTHONPATH'] = '{0}{1}'.format(os.path.join(sys.path[0], os.path.pardir),
                                           ':{0}'.format(os.environ['PYTHONPATH'])
                                           if os.environ.get('PYTHONPATH') else '')

import utils as utils
import client as client


# Parse configuration
parser = argparse.ArgumentParser(description='Start cloud Klever scheduler client according to the provided '
                                             'configuration.')
parser.add_argument('mode', metavar="MODE", help='TASK or JOB.')
parser.add_argument('conf', metavar="CONF", help='JSON string with all necessary configuration.')
parser.add_argument('--file', metavar="FILE", help='File with configuration. Use it during debug.')
args = parser.parse_args()

if args.mode == "JOB":
    if args.file and os.path.isfile(args.file):
        with open(args.file, encoding="utf8") as fh:
            conf = json.loads(fh.read())
    else:
        conf = json.loads(str(args.conf))

    conf = utils.common_initialization("Client controller", conf)
    logging.info("Proceed to job solution")
    exit_code = client.solve_job(conf)
    logging.info("Exiting with Klever Core exit code {}".format(exit_code))
    exit(int(exit_code))
elif args.mode == "TASK":
    # TODO: merge this code with almost the same code for JOB.
    if args.file and os.path.isfile(args.file):
        with open(args.file, encoding="utf8") as fh:
            conf = json.loads(fh.read())
    else:
        conf = json.loads(str(args.conf))

    conf = utils.common_initialization("Client controller", conf)
    logging.info("Proceed to task solution")
    exit_code = client.solve_task(conf)
    logging.info("Exiting with exit code {}".format(exit_code))
    exit(exit_code)
else:
    NotImplementedError("Provided mode {} is not supported by the client".format(args.mode))

__author__ = 'Ilja Zakharov <ilja.zakharov@ispras.ru>'
