{
  "templates": {
    "CPAchecker common": {
      "description": "Common options for the CPAchecker tool",
      "add options": [
        {"-setprop": "parser.readLineDirectives=true"},
        {"-setprop": "counterexample.export.extendedWitnessFile=witness.%d.graphml"},
        {"-setprop": "counterexample.export.exportExtendedWitness=true"},
        {"-setprop": "counterexample.export.compressWitness=false"},
        {"-setprop": "cpa.arg.witness.exportSourcecode=true"},
        {"-setprop": "cpa.arg.witness.removeInsufficientEdges=false"},
        {"-setprop": "limits.time.cpu=%ldv:CPU time:0.9:s%s"},
        {"-heap": "%ldv:memory size:0.8:MB%m"}
      ]
    },
    "Ultimate common": {
      "description": "Common options for the UltimateAutimizer tool",
      "add options": [
        {"--witness-name": "witness.1.graphml"},
        {"--witness-dir": "./output/"},
        {"--architecture": "64bit"}
      ]
    },
    "CPAchecker reachability": {
      "description": "CPAchecker for reachability checking",
      "inherit": "CPAchecker common",
      "safety properties": ["CHECK( init({entry_point}()), LTL(G ! call(__VERIFIER_error())) )"],
      "add options": [
        {"-ldv": ""},
        {"-setprop": "coverage.file=coverage.info"}
      ]
    },
    "CPAchecker BAM reachability": {
      "description": "CPAchecker with BAM for reachability checking",
      "inherit": "CPAchecker common",
      "safety properties": ["CHECK( init({entry_point}()), LTL(G ! call(__VERIFIER_error())) )"],
      "add options": [
        {"-ldv-bam": ""},
        {"-setprop": "coverage.file=coverage.info"}
      ]
    },
    "CPAchecker SMG memory checking": {
      "description": "CPAchecker with SMG for memory errors checking",
      "inherit": "CPAchecker common",
      "safety properties": [
          "CHECK( init({entry_point}()), LTL(G valid-free) )",
          "CHECK( init({entry_point}()), LTL(G valid-deref) )",
          "CHECK( init({entry_point}()), LTL(G valid-memtrack) )"
      ],
      "add options": [
        {"-smg-ldv": ""},
        {"-setprop": "analysis.traversal.order=dfs"},
        {"-setprop": "analysis.machineModel=LINUX64"}
      ]
    },
    "CPALockator": {
      "description": "CPAchecker for checking races",
      "inherit": "CPAchecker common",
      "safety properties": ["CHECK( init({entry_point}()), LTL(G ! call(__VERIFIER_error())) )"],
      "add options": [
        {"-lockator-linux": ""},
        {"-setprop": "parser.readLineDirectives=true"},
        {"-setprop": "counterexample.export.graphml=witness.%d.graphml"},
        {"-setprop": "counterexample.export.compressWitness=false"},
        {"-setprop": "limits.time.cpu=%ldv:CPU time:0.9:s%s"},
        {"-heap": "%ldv:memory size:0.8:MB%m"},
        {"-setprop": "analysis.machineModel=LINUX64"}
      ]
    }
  },
  "profiles": {
    "reachability": {
      "CPAchecker": {
        "trunk:27946": {"inherit": "CPAchecker BAM reachability"}
      },
      "UltimateAutomizer": {"v0.1.20": {"inherit": "Ultimate common"}}
    },
    "race checking": {
      "CPAchecker": {"CPALockator:28882": {"inherit": "CPALockator"}}
    },
    "memory checking Linux64": {
      "CPAchecker": {"trunk:27946": {"inherit": "CPAchecker SMG memory checking"}}
    },
    "memory checking ARM": {
      "CPAchecker": {"trunk:27946": {
          "inherit": "CPAchecker SMG memory checking",
          "add options": [{"-setprop": "analysis.machineModel=ARM"}],
          "exclude options": [{"-setprop": "analysis.machineModel=LINUX64"}]
      }}
    }
  }
}
