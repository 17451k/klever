around: define(likely(x)) { (x) }

around: define(unlikely(x)) { (x) }

info: execution(static $ $(void)) {
  $fprintf<"$env<CWD>/static-execution.txt","%s %s ret='%s'\n",$path,$func_name,$ret_type_str>
}
// for i in range(max_args_num)
info: execution(static $ $({{ arg_patterns[i] }})) {
  $fprintf<"$env<CWD>/static-execution.txt","%s %s ret='%s' {{ arg_printf_patterns[i] }}\n",$path,$func_name,$ret_type_str,{{ arg_types[i] }}>
}
// endfor
// for i in range(max_args_num)
info: execution(static $ $({{ arg_patterns[i] }}, ...)) {
  $fprintf<"$env<CWD>/static-execution.txt","%s %s ret='%s' {{ arg_printf_patterns[i] }} ...\n",$path,$func_name,$ret_type_str,{{ arg_types[i] }}>
}
// endfor

info: execution($ $(void)) {
  $fprintf<"$env<CWD>/execution.txt","%s %s ret='%s'\n",$path,$func_name,$ret_type_str>
}
// for i in range(max_args_num)
info: execution($ $({{ arg_patterns[i] }})) {
  $fprintf<"$env<CWD>/execution.txt","%s %s ret='%s' {{ arg_printf_patterns[i] }}\n",$path,$func_name,$ret_type_str,{{ arg_types[i] }}>
}
// endfor
// for i in range(max_args_num)
info: execution($ $({{ arg_patterns[i] }}, ...)) {
  $fprintf<"$env<CWD>/execution.txt","%s %s ret='%s' {{ arg_printf_patterns[i] }} ...\n",$path,$func_name,$ret_type_str,{{ arg_types[i] }}>
}
// endfor

info: declare_func(static $ $(void)) {
  $fprintf<"$env<CWD>/static-declare_func.txt","%s %s ret='%s'\n",$path,$func_name,$ret_type_str>
}
// for i in range(max_args_num)
info: declare_func(static $ $({{ arg_patterns[i] }})) {
  $fprintf<"$env<CWD>/static-declare_func.txt","%s %s ret='%s' {{ arg_printf_patterns[i] }}\n",$path,$func_name,$ret_type_str,{{ arg_types[i] }}>
}
// endfor

info: declare_func($ $(void)) {
  $fprintf<"$env<CWD>/declare_func.txt","%s %s ret='%s'\n",$path,$func_name,$ret_type_str>
}
// for i in range(max_args_num)
info: declare_func($ $({{ arg_patterns[i] }})) {
  $fprintf<"$env<CWD>/declare_func.txt","%s %s ret='%s' {{ arg_printf_patterns[i] }}\n",$path,$func_name,$ret_type_str,{{ arg_types[i] }}>
}
// endfor

/* info: expand(__EXPORT_SYMBOL(sym, sec)) {
  $fprintf<"$env<CWD>/exported-symbols.txt","%s %s\n",$path,$arg_val1>
}*/

info: expand(module_init(arg)){
    $fprintf<"$env<CWD>/init.txt","%s %s\n",$path,$arg_val1>
}

info: expand(module_exit(arg)){
    $fprintf<"$env<CWD>/exit.txt","%s %s\n",$path,$arg_val1>
}

// for i in range(max_args_num)
info: expand($({{ arg_patterns[i] }})) {
    $fprintf<"$env<CWD>/expand.txt","%s %s\n",$path,$macro_name>
}
// endfor

info: call( $ $(void)) {
  $fprintf<"$env<CWD>/call-function.txt","%s %s %s\n",$func_context_path,$func_context_name,$func_name>
}
// for i in range(max_args_num)
info: call($ $({{ arg_patterns[i] }})) {
  $fprintf<"$env<CWD>/call-function.txt","%s %s %s {{ arg_printf_patterns[i] }}\n",$func_context_path,$func_context_name,$func_name,{{ arg_vals[i] }}>
}
// endfor

info: init_global($ struct $ $){
    $fprintf<"$env<CWD>/global.txt","Structure initializer description begin path='%s' name='%s' type='%s'\n",$env<CC_IN_FILE>,$var_name,$var_type_name>
    $fprintf_var_init_list<"$env<CWD>/global.txt">
    $fprintf<"$env<CWD>/global.txt","Structure initializer description end\n">
}

info: init_global($ struct $ *$){
    $fprintf<"$env<CWD>/global.txt","Structure pointer initializer description begin path='%s' name='%s'\n",$env<CC_IN_FILE>,$var_name>
    $fprintf_var_init_list<"$env<CWD>/global.txt">
    $fprintf<"$env<CWD>/global.txt","Structure pointer initializer description end\n">
}

info: init_global($ struct $ *$[$]){
    $fprintf<"$env<CWD>/global.txt","Structure pointers array initializer description begin path='%s' name='%s'\n",$env<CC_IN_FILE>,$var_name>
    $fprintf_var_init_list<"$env<CWD>/global.txt">
    $fprintf<"$env<CWD>/global.txt","Structure pointers array initializer description end\n">
}
