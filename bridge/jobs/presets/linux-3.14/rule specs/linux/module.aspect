before: file ("$this")
{
/* NOTE: first header is included like in mutex.aspect. */
#include <linux/kernel.h>
#include <linux/module.h>

extern int ldv_try_module_get(struct module *);
extern void ldv_module_get(struct module *);
extern void ldv_module_put(struct module *);
extern unsigned int ldv_module_refcount(void);
extern void ldv_module_put_and_exit(void);
}

around: call(static inline int try_module_get(..))
{
	return ldv_try_module_get($arg1);
}

around: call(bool try_module_get(..))
{
	return ldv_try_module_get($arg1);
}

around: call(static inline void __module_get(..))
{
	ldv_module_get($arg1);
}

around: call(void __module_get(..))
{
	ldv_module_get($arg1);
}

around: call(void module_put(..))
{
	ldv_module_put($arg1);
}

around: call(static inline void module_put(..))
{
	ldv_module_put($arg1);
}

around: define(module_put_and_exit(code))
{
	ldv_module_put_and_exit();
}

around: call(unsigned int module_refcount(..))
{
	return ldv_module_refcount();
}

around: call(unsigned long module_refcount(..))
{
	return ldv_module_refcount();
}

/* TODO: how this affects other rule specifications when using mutliaspects verification? */
/* nonseekable_open is a generic function, and it always returns zero in addition to setting some flags. For the
 * purpose of this rule specification, we assume it merely returns 0.
 */
around: call(int nonseekable_open(..))
{
	return 0;
}
