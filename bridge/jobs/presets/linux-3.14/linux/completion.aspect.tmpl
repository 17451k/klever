before: file ("$this")
{
struct completion;

extern void __ldv_init_completion_macro(struct completion *x);
// for arg_sign in completion_arg_signs
extern void ldv_init_completion{{ arg_sign.id }}(void);
extern void ldv_wait_for_completion{{ arg_sign.id }}(void);
extern void ldv_init_completion_macro{{ arg_sign.id }}(void);
// endfor
}

around: define(INIT_COMPLETION(x))
{
__ldv_init_completion_macro(&x)
}

around: call(void __ldv_init_completion_macro(..))
{
	ldv_init_completion_macro{{ completion_arg_sign_patterns[1] }}();
}

before: call(void wait_for_completion(..)) ||
		call(int wait_for_completion_interruptible(..)) ||
		call(int wait_for_completion_killable(..)) ||
		call(unsigned long wait_for_completion_timeout(..)) ||
		call(long wait_for_completion_interruptible_timeout(..)) ||
		call(long wait_for_completion_killable_timeout(..)) ||
		call(bool try_wait_for_completion(..))
{
	ldv_wait_for_completion{{ completion_arg_sign_patterns[1] }}();
}

around: call(static inline void init_completion(..))
{
	ldv_init_completion{{ completion_arg_sign_patterns[1] }}();
}
