#include <verifier/common.h>
#include <verifier/nondet.h>

struct clk;

// for arg_sign in clk_arg_signs
/* CHANGE_STATE Initialize counter to zero */
int ldv_counter{{ arg_sign.id }} = 0;

/* MODEL_FUNC_DEF Release */
void ldv_clk_disable{{ arg_sign.id }}(struct clk *clk)
{
    /* ASSERT The clk must be freed only once */
    ldv_assert("linux:clk::less initial decrement", ldv_counter{{ arg_sign.id }} == 1);
    /* CHANGE_STATE Increase counter */
    ldv_counter{{ arg_sign.id }} = 0;
}

/* MODEL_FUNC_DEF Reset counter */
int ldv_clk_enable{{ arg_sign.id }}(void)
{
	int retval = ldv_undef_int();
	if (!retval)
	{
		/* CHANGE_STATE Increase counter */
		ldv_counter{{ arg_sign.id }} = 1;
	}
	return retval;
}
// endfor

/* MODEL_FUNC_DEF Check that all clk are freed at the end */
void ldv_check_final_state(void)
{
	// for arg_sign in clk_arg_signs
	/* ASSERT All clk should be released before finishing operation */
	ldv_assert("linux:clk::more at exit", ldv_counter{{ arg_sign.id }} == 0);
	// endfor
}