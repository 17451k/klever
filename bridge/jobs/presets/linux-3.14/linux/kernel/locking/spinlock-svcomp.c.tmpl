/*
 * Copyright (c) 2014-2016 ISPRAS (http://www.ispras.ru)
 * Institute for System Programming of the Russian Academy of Sciences
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * ee the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <linux/ldv/common.h>
#include <verifier/common.h>
#include <verifier/nondet.h>
#include <verifier/pthread_mutex.h>


// for arg_sign in spinlock_arg_signs
pthread_mutex_t smutex{{ arg_sign.id }};

void ldv_spin_lock{{ arg_sign.id }}(void)
{
	pthread_mutex_lock(&smutex{{ arg_sign.id }});
}

void ldv_spin_unlock{{ arg_sign.id }}(void)
{
	pthread_mutex_unlock(&smutex{{ arg_sign.id }});
}

int ldv_spin_trylock{{ arg_sign.id }}(void)
{
	return pthread_mutex_trylock(&smutex{{ arg_sign.id }});
}

void ldv_spin_unlock_wait{{ arg_sign.id }}(void)
{
	
}

int ldv_spin_is_locked{{ arg_sign.id }}(void)
{
	if (ldv_undef_int()) {
		return 1;
	}
	else {
		return 0;
	}
}

int ldv_spin_can_lock{{ arg_sign.id }}(void)
{
	return !ldv_spin_is_locked{{ arg_sign.id }}();
}

int ldv_spin_is_contended{{ arg_sign.id }}(void)
{
	int is_spin_contended;

	is_spin_contended = ldv_undef_int();

	if(is_spin_contended) {
		return 0;
	}
	else {
		return 1;
	}
}

int ldv_atomic_dec_and_lock{{ arg_sign.id }}(void)
{
	int atomic_value_after_dec;

	atomic_value_after_dec = ldv_undef_int();

	if (atomic_value_after_dec == 0) {
		ldv_spin_lock{{ arg_sign.id }}();
		return 1;
	}

	return 0;
}
// endfor

