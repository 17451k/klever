/*
 * Copyright (c) 2014-2016 ISPRAS (http://www.ispras.ru)
 * Institute for System Programming of the Russian Academy of Sciences
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * ee the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <linux/errno.h>
#include <linux/types.h>
#include <linux/ldv/common.h>
#include <verifier/common.h>
#include <verifier/nondet.h>
#include <verifier/set.h>
#include <verifier/pthread_mutex.h>

// for arg_sign in mutex_arg_signs
pthread_mutex_t pmutex{{ arg_sign.id }};

void ldv_mutex_lock{{ arg_sign.id }}(struct mutex *lock)
{
	pthread_mutex_lock(&pmutex{{ arg_sign.id }});
}

int ldv_mutex_lock_interruptible_or_killable{{ arg_sign.id }}(struct mutex *lock)
{
	if (ldv_undef_int()) {
		pthread_mutex_lock(&pmutex{{ arg_sign.id }});
		return 0;
	}
	else {
		return -EINTR;
	}
}

int ldv_mutex_is_locked{{ arg_sign.id }}(struct mutex *lock)
{
	if (ldv_undef_int()) {
		return 1;
	}
	else {
		return 0;
	}
}

int ldv_mutex_trylock{{ arg_sign.id }}(struct mutex *lock)
{
	return pthread_mutex_trylock(&pmutex{{ arg_sign.id }});
}

int ldv_atomic_dec_and_mutex_lock{{ arg_sign.id }}(atomic_t *cnt, struct mutex *lock)
{
	cnt->counter--;

	if (cnt->counter) {
		return 0;
	}
	else {
		pthread_mutex_lock(&pmutex{{ arg_sign.id }});
		return 1;
	}
}

void ldv_mutex_unlock{{ arg_sign.id }}(struct mutex *lock)
{
	pthread_mutex_unlock(&pmutex{{ arg_sign.id }});
}
// endfor

void ldv_initialize(void)
{
  
}

void ldv_check_final_state(void)
{
}

void ldv_assert(const char *desc, int expr) {
  if (!expr) {
ERROR:
    __VERIFIER_error();
  }
}
