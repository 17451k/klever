before: file ("$this")
{
#include <linux/mutex.h>

extern void mutex_lock(struct mutex *);
extern void mutex_lock_nested(struct mutex *, unsigned int);
extern int mutex_lock_interruptible(struct mutex *);
extern int mutex_lock_killable(struct mutex *);
extern void ldv_mutex_acquire(struct mutex *);
extern int ldv_mutex_acquire_interruptible_or_killable(struct mutex *);
extern int ldv_mutex_is_acquired(struct mutex *);
extern int ldv_mutex_try_acquire(struct mutex *);
extern int ldv_mutex_decrement_and_acquire(atomic_t *, struct mutex *);
extern void ldv_mutex_release(struct mutex *);
}

around: define(mutex_lock(lock))
{
mutex_lock(lock)
}

around: define(mutex_lock_nested(lock, subclass))
{
mutex_lock_nested(lock, subclass)
}

around: define(mutex_lock_interruptible(lock))
{
mutex_lock_interruptible(lock)
}

around: define(mutex_lock_killable(lock))
{
mutex_lock_killable(lock)
}

around: call(void mutex_lock(struct mutex *)) || call(void mutex_lock_nested(struct mutex *, unsigned int))
{
	ldv_mutex_acquire($arg1);
}

around: call(int mutex_lock_interruptible(struct mutex *)) || call(int mutex_lock_killable(struct mutex *))
{
	return ldv_mutex_acquire_interruptible_or_killable($arg1);
}

around: call(static inline int mutex_is_locked(struct mutex *))
{
	return ldv_mutex_is_acquired($arg1);
}

around: call(int mutex_trylock(struct mutex *))
{
	return ldv_mutex_try_acquire($arg1);
}

around: call(int atomic_dec_and_mutex_lock(atomic_t *, struct mutex *))
{
	return ldv_mutex_decrement_and_acquire($arg1, $arg2);
}

around: call(void mutex_unlock(struct mutex *))
{
	ldv_mutex_release($arg1);
}
