before: file ("$this")
{
struct completion;

extern void __ldv_init_completion_macro(struct completion *x);
}

around: define(INIT_COMPLETION(x))
{
__ldv_init_completion_macro(&x)
}

info: call(void wait_for_completion(..)) ||
		call(int wait_for_completion_interruptible(..)) ||
		call(int wait_for_completion_killable(..)) ||
		call(unsigned long wait_for_completion_timeout(..)) ||
		call(long wait_for_completion_interruptible_timeout(..)) ||
		call(long wait_for_completion_killable_timeout(..)) ||
		call(bool try_wait_for_completion(..)) ||
		call(static inline void init_completion(..)) ||
		call(void __ldv_init_completion_macro(..))
{
	$fprintf<$env<LDV_ARG_SIGNS_FILE>,"%s\n",$arg_sign1>
}
