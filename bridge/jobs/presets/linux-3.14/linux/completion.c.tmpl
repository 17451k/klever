#include <verifier/common.h>

enum
{
	LDV_NOT_DECLARED,
	LDV_DECLARED,
	LDV_COMPLETED,
};

// for arg_sign in completion_arg_signs

static int ldv_completion{{ arg_sign.id }} = LDV_NOT_DECLARED;

/* MODEL_FUNC_DEF Initialize completion */
void ldv_init_completion{{ arg_sign.id }}(void)
{
	/* CHANGE_STATE init {{ arg_sign.text }}. */
	ldv_completion{{ arg_sign.id }} = LDV_DECLARED;
}

/* MODEL_FUNC_DEF Check if completion was not initialized and initialize completion */
void ldv_init_completion_macro{{ arg_sign.id }}(void)
{
	/* ASSERT Check if {{ arg_sign.text }} is declared.*/
	ldv_assert("linux:completion::double init", ldv_completion{{ arg_sign.id }} != LDV_NOT_DECLARED);
	/* CHANGE_STATE init {{ arg_sign.text }}. */
	ldv_completion{{ arg_sign.id }} = LDV_DECLARED;
}

/* MODEL_FUNC_DEF Check if completion was initialized and wait for it */
void ldv_wait_for_completion{{ arg_sign.id }}(void)
{
	/* ASSERT Check if there was declaration for {{ arg_sign.text }}.*/
	ldv_assert("linux:completion::wait without init", ldv_completion{{ arg_sign.id }} != LDV_NOT_DECLARED);
	/* CHANGE_STATE Set {{ arg_sign.text }} as completed. */
	ldv_completion{{ arg_sign.id }} = LDV_COMPLETED;
}

// endfor
