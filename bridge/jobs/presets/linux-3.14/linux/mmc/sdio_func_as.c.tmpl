#include <linux/ldv/common.h>
#include <verifier/common.h>

// for arg_sign in sdio_func_as_arg_signs

/* CHANGE_STATE SDIO bus is unclaimed */
unsigned short ldv_sdio_element{{ arg_sign.id }} = 0;

/* MODEL_FUNC_DEF Check that SDIO bus was claimed */
void ldv_check_context{{ arg_sign.id }}(void)
{
	/* ASSERT SDIO bus should be claimed before usage */
	ldv_assert("linux:mmc:sdio_func::wrong params", ldv_sdio_element{{ arg_sign.id }} == 1);
}

/* MODEL_FUNC_DEF Check that SDIO bus was not claimed */
void ldv_sdio_claim_host{{ arg_sign.id }}(void)
{
	/* ASSERT SDIO bus should be unclaimed */
	ldv_assert("linux:mmc:sdio_func::double claim", ldv_sdio_element{{ arg_sign.id }} == 0);

	/* CHANGE_STATE Claim SDIO bus (remember device that does this) */
	ldv_sdio_element{{ arg_sign.id }} = 1;
}

/* MODEL_FUNC_DEF Check that SDIO bus was claimed by the same device */
void ldv_sdio_release_host{{ arg_sign.id }}(void)
{
	/* ASSERT SDIO bus was claimed by the same device */
	ldv_assert("linux:mmc:sdio_func::release without claim", ldv_sdio_element{{ arg_sign.id }} == 1);

	/* CHANGE_STATE Release SDIO bus */
	ldv_sdio_element{{ arg_sign.id }} = 0;
}

// endfor

/* MODEL_FUNC_DEF Check that SDIO bus is not claimed at the end */
void ldv_check_final_state(void)
{
	// for arg_sign in sdio_func_as_arg_signs
	/* ASSERT SDIO bus should be released before finishing operation */
	ldv_assert("linux:mmc:sdio_func::unreleased at exit", ldv_sdio_element{{ arg_sign.id }} == 0);
	// endfor
}
