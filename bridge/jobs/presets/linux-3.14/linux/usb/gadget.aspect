before: file ("$this")
{
struct class;

void *ldv_create_class(void);
int ldv_register_class(void);
void ldv_unregister_class(void);
void ldv_destroy_class(struct class *cls);

int ldv_register_chrdev(int major);
int ldv_register_chrdev_region(void);
void ldv_unregister_chrdev_region(void);

int ldv_register_usb_gadget(void);
void ldv_unregister_usb_gadget(void);
}

around: define(class_create(owner, name))
{
ldv_create_class()
}

around: define(class_register(class))
{
ldv_register_class()
}

around: call(void class_destroy(struct class *cls))
{
	ldv_destroy_class(cls);
}

after: call(void class_unregister(..))
{
	ldv_unregister_class();
}

after: call(int alloc_chrdev_region(..)) ||
       call(int register_chrdev_region(..))
{
	return ldv_register_chrdev_region();
}

after: execution(static inline int register_chrdev(unsigned int major, ..))
{
	return ldv_register_chrdev(major);
}

after: call(void unregister_chrdev_region(..)) ||
       execution(static inline void unregister_chrdev(..))
{
	ldv_unregister_chrdev_region();
}

after: call(int usb_gadget_register_driver(..)) ||
       call(int usb_gadget_probe_driver(..))
{
	return ldv_register_usb_gadget();
}

/* Although this function may return an error we don't take this into account as
 * it's done in the most of drivers using it. Otherwise usb gadget will be
 * registered at the end of execution.
 */
after: call(int usb_gadget_unregister_driver(..))
{
	ldv_unregister_usb_gadget();
}
