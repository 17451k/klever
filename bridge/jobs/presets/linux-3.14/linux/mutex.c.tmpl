#include <linux/types.h>
#include <linux/errno.h>
#include <verifier/rcv.h>
#include <verifier/set.h>

struct mutex;

// for arg_sign in mutex_arg_signs
Set LDV_MUTEXES{{ arg_sign.id }};

/* MODEL_FUNC_DEF Check that mutex{{ arg_sign.text }} was not locked and lock it */
void ldv_mutex_lock{{ arg_sign.id }}(struct mutex *lock)
{
	/* ASSERT Mutex{{ arg_sign.text }} must be unlocked */
	ldv_assert("linux:mutex::one thread:double lock", !ldv_set_contains(LDV_MUTEXES{{ arg_sign.id }}, lock));
	/* CHANGE_STATE Lock mutex{{ arg_sign.text }} */
	ldv_set_add(LDV_MUTEXES{{ arg_sign.id }}, lock);
}

/* MODEL_FUNC_DEF Check that mutex{{ arg_sign.text }} was not locked and nondeterministically lock it */
int ldv_mutex_lock_interruptible_or_killable{{ arg_sign.id }}(struct mutex *lock)
{
	/* ASSERT Mutex{{ arg_sign.text }} must be unlocked */
	ldv_assert("linux:mutex::one thread:double lock", !ldv_set_contains(LDV_MUTEXES{{ arg_sign.id }}, lock));
	/* OTHER Nondeterministically lock mutex{{ arg_sign.text }} */
	if (ldv_undef_int())
	{
		/* CHANGE_STATE Lock mutex{{ arg_sign.text }} */
	    ldv_set_add(LDV_MUTEXES{{ arg_sign.id }}, lock);
		/* RETURN Successfully locked mutex{{ arg_sign.text }} */
		return 0;
	}
	else
	{
		/* RETURN Could not lock mutex{{ arg_sign.text }} */
		return -EINTR;
	}
}

/* MODEL_FUNC_DEF Say whether mutex{{ arg_sign.text }} was locked in this or another thread  */
int ldv_mutex_is_acquired{{ arg_sign.id }}(struct mutex *lock)
{
	/* OTHER Whether mutex{{ arg_sign.text }} was locked in this thread */
	if (ldv_set_contains(LDV_MUTEXES{{ arg_sign.id }}, lock))
	{
		/* RETURN Mutex{{ arg_sign.text }} was locked in this thread */
		return 1;
	}
	/* OTHER Nondeterministically decide whether mutex{{ arg_sign.text }} was locked in another thread */
	else if (ldv_undef_int())
	{
	    /* RETURN Mutex{{ arg_sign.text }} was locked in another thread */
	    return 1;
	}
	else
	{
		/* RETURN Mutex{{ arg_sign.text }} was not acquired in this or another thread */
		return 0;
	}
}

/* MODEL_FUNC_DEF Lock mutex{{ arg_sign.text }} if it was not locked before */
int ldv_mutex_trylock{{ arg_sign.id }}(struct mutex *lock)
{
	/* ASSERT Mutex{{ arg_sign.text }} must be unlocked */
	ldv_assert("linux:mutex::one thread:double lock try", !ldv_set_contains(LDV_MUTEXES{{ arg_sign.id }}, lock));

	/* OTHER Whether mutex{{ arg_sign.text }} was locked */
	if (ldv_mutex_is_acquired{{ arg_sign.id }}(lock))
	{
		/* RETURN Mutex{{ arg_sign.text }} was locked */
		return 0;
	}
	else
	{
		/* CHANGE_STATE Lock mutex{{ arg_sign.text }} */
	    ldv_set_add(LDV_MUTEXES{{ arg_sign.id }}, lock);
		/* RETURN Successfully locked mutex{{ arg_sign.text }} */
		return 1;
	}
}

/* MODEL_FUNC_DEF Decrease counter by one and if it becomes zero check that mutex{{ arg_sign.text }} was not locked and lock it */
int ldv_atomic_dec_and_mutex_lock{{ arg_sign.id }}(atomic_t *cnt, struct mutex *lock)
{
	/* OTHER Decrease counter by one */
	cnt->counter--;

	/* OTHER Whether counter becomes zero */
	if (cnt->counter)
	{
		/* RETURN Do not lock mutex{{ arg_sign.text }} since counter is greater than zero */
		return 0;
	}
	else
	{
		ldv_mutex_lock{{ arg_sign.id }}(lock);
		/* RETURN Successfully locked mutex{{ arg_sign.text }} */
		return 1;
	}
}

/* MODEL_FUNC_DEF Check that mutex{{ arg_sign.text }} was locked and unlock it */
void ldv_mutex_unlock{{ arg_sign.id }}(struct mutex *lock)
{
	/* ASSERT Mutex{{ arg_sign.text }} must be locked */
	ldv_assert("linux:mutex::one thread:double unlock", ldv_set_contains(LDV_MUTEXES{{ arg_sign.id }}, lock));
	/* CHANGE_STATE Unlock mutex{{ arg_sign.text }} */
	ldv_set_remove(LDV_MUTEXES{{ arg_sign.id }}, lock);
}
// endfor

/* MODEL_FUNC_DEF Make all mutexes unlocked at the beginning */
void ldv_initialize(void)
{
	// for arg_sign in mutex_arg_signs
	/* CHANGE_STATE Mutex{{ arg_sign.text }} is unlocked at the beginning */
	ldv_set_init(LDV_MUTEXES{{ arg_sign.id }});
	// endfor
}

/* MODEL_FUNC_DEF Check that all mutexes are unlocked at the end */
void ldv_check_final_state(void)
{
	// for arg_sign in mutex_arg_signs
	/* ASSERT Mutex{{ arg_sign.text }} must be unlocked at the end */
	ldv_assert("linux:mutex::one thread:locked at exit", ldv_set_is_empty(LDV_MUTEXES{{ arg_sign.id }}));
	// endfor
}
