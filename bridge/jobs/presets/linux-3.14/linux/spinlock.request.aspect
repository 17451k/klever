before: file ("$this")
{
#include <linux/spinlock_types.h>

extern void __ldv_spin_lock(spinlock_t *lock);
extern void __ldv_spin_unlock(spinlock_t *lock);
extern int __ldv_spin_trylock(spinlock_t *lock);
extern void __ldv_spin_unlock_wait(spinlock_t *lock);
extern void __ldv_spin_can_lock(spinlock_t *lock);
extern int __ldv_atomic_dec_and_lock(spinlock_t *lock);
}

around: define(spin_lock(lock))
{
ldv__spin_lock(lock)
}

around: define(spin_lock_bh(lock))
{
ldv__spin_lock(lock)
}

around: define(spin_lock_irq(lock))
{
ldv__spin_lock(lock)
}

around: define(spin_lock_nested(lock, subclass))
{
ldv__spin_lock(lock)
}

around: define(spin_lock_nest_lock(lock, nest_lock))
{
ldv__spin_lock(lock)
}

around: define(spin_lock_irqsave(lock, flags))
{
ldv__spin_lock(lock)
}

around: define(spin_lock_irqsave_nested(lock, flags, subclass))
{
ldv__spin_lock(lock)
}

info: call(static inline void spin_lock(..)) ||
      call(static inline void spin_lock_bh(..)) ||
      call(static inline void spin_lock_irq(..)) ||
      call(void ldv__spin_lock(..))
{
	$fprintf<$env<LDV_ARG_SIGNS_FILE>,"%s\n",$arg_sign1>
}

around: define(spin_unlock(lock))
{
ldv__spin_unlock(lock)
}

around: define(spin_unlock_bh(lock))
{
ldv__spin_unlock(lock)
}

around: define(spin_unlock_irq(lock))
{
ldv__spin_unlock(lock)
}

around: define(spin_unlock_irqrestore(lock, flags))
{
ldv__spin_unlock(lock)
}

info: call(static inline void spin_unlock(..)) ||
      call(static inline void spin_unlock_bh(..)) ||
      call(static inline void spin_unlock_irq(..)) ||
      call(static inline void spin_unlock_irqrestore(..)) ||
      call(void ldv__spin_unlock(..))
{
	$fprintf<$env<LDV_ARG_SIGNS_FILE>,"%s\n",$arg_sign1>
}

around: define(spin_trylock(lock))
{
ldv__spin_trylock(lock)
}

around: define(spin_trylock_bh(lock))
{
ldv__spin_trylock(lock)
}

around: define(spin_trylock_irq(lock))
{
ldv__spin_trylock(lock)
}

around: define(spin_trylock_irqsave(lock, flags))
{
ldv__spin_trylock(lock)
}

info: call(static inline int spin_trylock(..)) ||
      call(static inline int spin_trylock_bh(..)) ||
      call(static inline int spin_trylock_irq(..)) ||
      call(int ldv__spin_trylock(..))
{
	$fprintf<$env<LDV_ARG_SIGNS_FILE>,"%s\n",$arg_sign1>
}

around: define(spin_unlock_wait(lock))
{
ldv__spin_unlock_wait(lock)
}

info: call(static inline void spin_unlock_wait(..)) ||
      call(void ldv__spin_unlock_wait(..))
{
	$fprintf<$env<LDV_ARG_SIGNS_FILE>,"%s\n",$arg_sign1>
}

info: call(static inline int spin_is_locked(..))
{
	$fprintf<$env<LDV_ARG_SIGNS_FILE>,"%s\n",$arg_sign1>
}

around: define(spin_can_lock(lock))
{
ldv__spin_can_lock(lock)
}

info: call(static inline int spin_can_lock(..)) ||
      call(void ldv__spin_can_lock(..))
{
	$fprintf<$env<LDV_ARG_SIGNS_FILE>,"%s\n",$arg_sign1>
}

info: call(static inline int spin_is_contended(..))
{
	$fprintf<$env<LDV_ARG_SIGNS_FILE>,"%s\n",$arg_sign1>
}

around: define(atomic_dec_and_lock(atomic, lock))
{
ldv__atomic_dec_and_lock(lock)
}

info: call(int ldv__atomic_dec_and_lock(..))
{ 
	$fprintf<$env<LDV_ARG_SIGNS_FILE>,"%s\n",$arg_sign1>
}
