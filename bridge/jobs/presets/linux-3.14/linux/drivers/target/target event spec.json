{
  "Linux 3.14 (base)": {
    "kernel model": {
      "transport_subsystem_register": {
        "comment": "Register new target backend operations.",
        "labels": {
          "se_subsystem_api": {
            "container": true,
            "parameter": true,
            "interface": [
              "se_subsystem.se_subsystem_api"
            ]
          }
        },
        "process": "<assign>.[register].<success> | <fail>",
        "actions": {
          "register": {
            "parameters": [
              "%se_subsystem_api%"
            ]
          },
          "fail": {
            "comment": "Failed to register new target backend operations.",
            "statements": [
              "return ldv_undef_int_negative();"
            ]
          },
          "assign": {
            "comment": "Get new target backend operations.",
            "statements": [
              "%se_subsystem_api% = $ARG1;"
            ]
          },
          "success": {
            "comment": "Successfully registered new target backend operations.",
            "statements": [
              "return 0;"
            ]
          }
        }
      },
      "transport_subsystem_release": {
        "comment": "Deregister new target backend operations.",
        "labels": {
          "se_subsystem_api": {
            "container": true,
            "parameter": true,
            "interface": [
              "se_subsystem.se_subsystem_api"
            ]
          }
        },
        "process": "<assign>.[deregister]",
        "actions": {
          "deregister": {
            "parameters": [
              "%se_subsystem_api%"
            ]
          },
          "assign": {
            "comment": "Get new target backend operations.",
            "statements": [
              "%se_subsystem_api% = $ARG1;"
            ]
          }
        }
      }
    },
    "environment processes": {
      "io_target_scenario": {
        "comment": "Invoke Linux-IO target callbacks.",
        "headers": [
          "target/target_core_base.h",
          "target/target_core_backend.h"
        ],
        "labels": {
          "se_subsystem_api": {
            "container": true,
            "interface": [
              "se_subsystem.se_subsystem_api"
            ]
          },
          "se_hba": {
            "resource": true,
            "interface": [
              "se_subsystem.se_hba"
            ]
          },
          "se_device": {
            "interface": [
              "se_subsystem.se_device"
            ]
          },
          "callback": {
            "resource": true,
            "callback": true
          }
        },
        "process": "(!register).<init>.{alloc_scenario}",
        "actions": {
          "alloc_scenario": {
            "comment": "Device structure is not allocated yet.",
            "process": "[se_alloc].(<alloc_success>.{call_scenario} | <alloc_failed>.{alloc_scenario}) | <free>.(deregister)"
          },
          "call_scenario": {
            "comment": "Device structure is allocated.",
            "process": "[callback].{call_scenario} | [attach_hba].[detach_hba].{call_scenario} | [se_free].{alloc_scenario}"
          },
          "register": {
            "parameters": [
              "%se_subsystem_api%"
            ]
          },
          "deregister": {
            "condition": [
              "%se_subsystem_api% == $ARG1"
            ],
            "parameters": [
              "%se_subsystem_api%"
            ]
          },
          "callback": {
            "callback": "%callback%",
            "parameters": [
              "%se_hba%",
              "%se_device%"
            ]
          },
          "se_free": {
            "callback": "%se_subsystem_api.free%",
            "parameters": [
              "%se_device%"
            ]
          },
          "se_alloc": {
            "callback": "%se_subsystem_api.alloc%",
            "parameters": [
              "%se_hba%"
            ],
            "callback return value": "%se_device%"
          },
          "attach_hba": {
            "callback": "%se_subsystem_api.attach_hba%",
            "parameters": [
              "%se_hba%"
            ]
          },
          "detach_hba": {
            "callback": "%se_subsystem_api.detach_hba%",
            "parameters": [
              "%se_hba%"
            ]
          },
          "init": {
            "comment": "Allocate memory for se_hba structure.",
            "statements": [
              "%se_hba% = $ALLOC(%se_hba%);"
            ]
          },
          "free": {
            "comment": "Free memory of se_hba structure.",
            "statements": [
              "$FREE(%se_hba%);"
            ]
          },
          "alloc_success": {
            "comment": "Memory has been allocated for se_device structure successfully.",
            "condition": [
              "%se_device% != 0"
            ]
          },
          "alloc_failed": {
            "comment": "Failed to allocate memory for se_device structure.",
            "condition": [
              "%se_device% == 0"
            ]
          }
        }
      }
    }
  },
  "Linux 4.6.7": {
    "kernel model": {
      "transport_backend_register": {
        "comment": "Register new target backend operations.",
        "labels": {
          "target_backend_ops": {
            "container": true,
            "parameter": true,
            "interface": [
              "target_backend.target_backend_ops"
            ]
          }
        },
        "process": "<assign>.[register].<success> | <fail>",
        "actions": {
          "register": {
            "parameters": [
              "%target_backend_ops%"
            ]
          },
          "fail": {
            "comment": "Failed to register new target backend operations.",
            "statements": [
              "return ldv_undef_int_negative();"
            ]
          },
          "assign": {
            "comment": "Get new target backend operations.",
            "statements": [
              "%target_backend_ops% = $ARG1;"
            ]
          },
          "success": {
            "comment": "Successfully registered new target backend operations.",
            "statements": [
              "return 0;"
            ]
          }
        }
      },
      "target_backend_unregister": {
        "comment": "Deregister new target backend operations.",
        "labels": {
          "target_backend_ops": {
            "container": true,
            "parameter": true,
            "interface": [
              "target_backend.target_backend_ops"
            ]
          }
        },
        "process": "<assign>.[deregister]",
        "actions": {
          "deregister": {
            "parameters": [
              "%target_backend_ops%"
            ]
          },
          "assign": {
            "comment": "Get new target backend operations.",
            "statements": [
              "%target_backend_ops% = $ARG1;"
            ]
          }
        }
      }
    },
    "environment processes": {
      "io_target_scenario": {
        "comment": "Invoke Linux-IO target callbacks.",
        "labels": {
          "target_backend_ops": {
            "container": true,
            "interface": [
              "target_backend.target_backend_ops"
            ]
          },
          "se_hba": {
            "resource": true,
            "interface": [
              "target_backend.se_hba"
            ]
          },
          "se_device": {
            "interface": [
              "target_backend.se_device"
            ]
          },
          "callback": {
            "resource": true,
            "callback": true
          }
        },
        "process": "(!register).<init>.{alloc_scenario}",
        "actions": {
          "alloc_scenario": {
            "comment": "Device structure is not allocated yet.",
            "process": "[se_alloc].(<alloc_success>.{call_scenario} | <alloc_failed>.{alloc_scenario}) | <free>.(deregister)"
          },
          "call_scenario": {
            "comment": "Device structure is allocated.",
            "process": "[callback].{call_scenario} | [attach_hba].[detach_hba].{call_scenario} | [se_free].{alloc_scenario}"
          },
          "register": {
            "parameters": [
              "%target_backend_ops%"
            ]
          },
          "deregister": {
            "condition": [
              "%target_backend_ops% == $ARG1"
            ],
            "parameters": [
              "%target_backend_ops%"
            ]
          },
          "callback": {
            "callback": "%callback%",
            "parameters": [
              "%se_hba%",
              "%se_device%"
            ]
          },
          "se_free": {
            "callback": "%target_backend_ops.free%",
            "parameters": [
              "%se_device%"
            ]
          },
          "se_alloc": {
            "callback": "%target_backend_ops.alloc%",
            "parameters": [
              "%se_hba%"
            ],
            "callback return value": "%se_device%"
          },
          "attach_hba": {
            "callback": "%target_backend_ops.attach_hba%",
            "parameters": [
              "%se_hba%"
            ]
          },
          "detach_hba": {
            "callback": "%target_backend_ops.detach_hba%",
            "parameters": [
              "%se_hba%"
            ]
          },
          "init": {
            "comment": "Allocate memory for se_hba structure.",
            "statements": [
              "%se_hba% = $ALLOC(%se_hba%);"
            ]
          },
          "free": {
            "comment": "Free memory of se_hba structure.",
            "statements": [
              "$FREE(%se_hba%);"
            ]
          },
          "alloc_success": {
            "comment": "Memory has been allocated for se_device structure successfully.",
            "condition": [
              "%se_device% != 0"
            ]
          },
          "alloc_failed": {
            "comment": "Failed to allocate memory for se_device structure.",
            "condition": [
              "%se_device% == 0"
            ]
          }
        }
      }
    }
  }
}