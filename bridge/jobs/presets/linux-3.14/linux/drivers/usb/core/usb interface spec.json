{
  "Linux 3.14 (base)": {
    "functions models": {
      "usb_reset_device": {
        "declaration": "int usb_reset_device(%usb.usb_device%)",
        "header": "linux/usb.h"
      },
      "usb_register_driver": {
        "declaration": "int usb_register_driver(*%usb.usb_driver%, struct module *, const char *)",
        "header": "linux/usb.h"
      },
      "usb_deregister": {
        "declaration": "void usb_deregister(*%usb.usb_driver%)",
        "header": "linux/usb.h"
      }
    },
    "categories": {
      "usb": {
        "containers": {
          "usb_driver": {
            "header": "linux/usb.h",
            "declaration": "struct usb_driver driver",
            "fields": {
              "probe": "%usb.probe%",
              "pre_reset": "%usb.pre%",
              "post_reset": "%usb.post%",
              "disconnect": "%usb.release%",
              "suspend": "%usb.suspend%",
              "resume": "%usb.resume%"
            }
          }
        },
        "callbacks": {
          "probe": {
            "declaration": "int (*probe) (%usb.usb_interface%, const struct usb_device_id *id)"
          },
          "pre": {
            "declaration": "int (*pre) (%usb.usb_interface%)"
          },
          "post": {
            "declaration": "int (*post) (%usb.usb_interface%)"
          },
          "release": {
            "declaration": "void (*release) (%usb.usb_interface%)"
          },
          "suspend": {
            "declaration": "int (*suspend) (%usb.usb_interface%, pm_message_t message)"
          },
          "resume": {
            "declaration": "int (*resume) (%usb.usb_interface%)"
          }
        },
        "resources": {
          "usb_interface": {
            "declaration": "struct usb_interface *usb_interface",
            "header": "linux/usb.h",
            "implemented in kernel": true
          },
          "usb_device": {
            "declaration": "struct usb_device *usb_device",
            "header": "linux/usb.h",
            "implemented in kernel": true
          }
        }
      }
    }
  }
}