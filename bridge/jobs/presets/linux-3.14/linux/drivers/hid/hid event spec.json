{
  "Linux 3.14 (base)": {
    "functions models": {
      "hid_add_device": {
        "comment": "Register hid device.",
        "labels": {
          "device": {
            "container": true,
            "parameter": true,
            "interface": [
              "hid.hid_device"
            ]
          }
        },
        "process": "<assign>.[register].<success> | <fail>",
        "actions": {
          "register": {
            "parameters": [
              "%device%"
            ]
          },
          "assign": {
            "comment": "Extract hid device from parameters.",
            "statements": [
              "%device% = $ARG1;"
            ]
          },
          "fail": {
            "comment": "Fail hid device registration.",
            "statements": [
              "return ldv_undef_int_negative();"
            ]
          },
          "success": {
            "comment": "Registration of hid device has been finished successfully.",
            "statements": [
              "return 0;"
            ]
          }
        }
      },
      "hid_destroy_device": {
        "comment": "Deregister hid device.",
        "labels": {
          "device": {
            "container": true,
            "parameter": true,
            "interface": [
              "hid.hid_device"
            ]
          }
        },
        "process": "<assign>.[deregister]",
        "actions": {
          "deregister": {
            "parameters": [
              "%device%"
            ]
          },
          "assign": {
            "comment": "Extract hid device from parameters.",
            "statements": [
              "%device% = $ARG1;"
            ]
          }
        }
      }
    },
    "environment processes": {
      "hid_scenario": {
        "comment": "Invoke hid callbacks.",
        "labels": {
          "hid_device": {
            "container": true,
            "interface": [
              "hid.hid_device"
            ]
          },
          "ll_driver": {
            "container": true,
            "pointer": true,
            "interface": [
              "hid.ll_driver"
            ]
          },
          "ret": {
            "declaration": "int a",
            "value": "ldv_undef_int()"
          },
          "callback": {
            "callback": true
          }
        },
        "process": "(!register).<assign>.{main}",
        "actions": {
          "main": {
            "comment": "Device initialization.",
            "process": "[start].(<start_success>.{inside} | <start_fail>.{main}) | (deregister)"
          },
          "inside": {
            "comment": "Input layer operations.",
            "process": "[open].(<open_success>.[callback].[close].{inside} | <open_fail>.[stop].{main}) | [stop].{main}"
          },
          "register": {
            "parameters": [
              "%hid_device%"
            ]
          },
          "deregister": {
            "condition": [
              "%hid_device% == $ARG1"
            ],
            "parameters": [
              "%hid_device%"
            ]
          },
          "assign": {
            "comment": "Extract ll_driver operations.",
            "statements": [
              "%ll_driver% = %hid_device%->ll_driver;"
            ]
          },
          "callback": {
            "callback": "%callback%",
            "parameters": [
              "%hid_device%"
            ]
          },
          "start": {
            "comment": "Start the hid device.",
            "callback": "%ll_driver.start%",
            "parameters": [
              "%hid_device%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ]
          },
          "stop": {
            "comment": "Stop the hid device.",
            "callback": "%ll_driver.stop%",
            "parameters": [
              "%hid_device%"
            ]
          },
          "open": {
            "comment": "Input layer open.",
            "callback": "%ll_driver.open%",
            "parameters": [
              "%hid_device%"
            ]
          },
          "close": {
            "comment": "Input layer close.",
            "callback": "%ll_driver.close%",
            "parameters": [
              "%hid_device%"
            ]
          },
          "start_success": {
            "comment": "Start has been successful.",
            "condition": [
              "%ret% == 0"
            ]
          },
          "start_fail": {
            "comment": "Start has failed.",
            "condition": [
              "%ret% != 0"
            ]
          },
          "open_success": {
            "comment": "Input layer open has been successful.",
            "condition": [
              "%ret% == 0"
            ]
          },
          "open_fail": {
            "comment": "Input layer open has been failed.",
            "condition": [
              "%ret% != 0"
            ]
          }
        }
      }
    }
  }
}