{
  "Linux 3.14 (base)": {
    "functions models": {
      "tty_set_operations": {
        "comment": "Save tty_operations at tty_driver.",
        "labels": {},
        "process": "<set>",
        "actions": {
          "set": {
            "comment": "Set field ops.",
            "statements": [
              "$ARG1->ops = $ARG2;"
            ]
          }
        }
      },
      "__tty_alloc_driver": {
        "comment": "Allocate tty driver.",
        "headers": [
          "linux/tty.h"
        ],
        "labels": {
          "tty_driver": {
            "resource": true,
            "interface": [
              "tty.tty_driver"
            ]
          }
        },
        "process": "<alloc>.<success> | <fail>",
        "actions": {
          "alloc": {
            "comment": "Allocate memory for tty_driver structure.",
            "statements": [
              "%tty_driver% = $ALLOC(%tty_driver%);"
            ]
          },
          "success": {
            "comment": "Successfully allocated memory for tty_driver structure.",
            "statements": [
              "return %tty_driver%;"
            ]
          },
          "fail": {
            "comment": "Failed to allocate memory for tty_driver structure.",
            "statements": [
              "return ERR_PTR(-ENOMEM);"
            ]
          }
        }
      },
      "alloc_tty_driver": {
        "comment": "Allocate tty driver",
        "headers": [
          "linux/tty.h"
        ],
        "labels": {
          "tty_driver": {
            "resource": true,
            "interface": [
              "tty.tty_driver"
            ]
          }
        },
        "process": "<alloc>.<success> | <fail>",
        "actions": {
          "alloc": {
            "comment": "Allocate memory for tty_driver structure.",
            "statements": [
              "%tty_driver% = $ALLOC(%tty_driver%);"
            ]
          },
          "success": {
            "comment": "Successfully allocated memory for tty_driver structure.",
            "statements": [
              "return %tty_driver%;"
            ]
          },
          "fail": {
            "comment": "Failed to allocate memory for tty_driver structure.",
            "statements": [
              "return 0;"
            ]
          }
        }
      },
      "tty_register_driver": {
        "comment": "Register tty driver.",
        "headers": [
          "linux/tty.h"
        ],
        "labels": {
          "tty_driver": {
            "parameter": true,
            "interface": [
              "tty.tty_driver"
            ]
          },
          "tty_operations": {
            "interface": [
              "tty.tty_operations"
            ]
          }
        },
        "process": "<assign>.[register].<success> | <failed>",
        "actions": {
          "assign": {
            "comment": "Get a tty driver structure.",
            "statements": [
              "%tty_driver% = $ARG1;",
              "%tty_operations% = %tty_driver%->ops;"
            ]
          },
          "success": {
            "comment": "Successfully registered TTY driver.",
            "statements": [
              "return 0;"
            ]
          },
          "failed": {
            "comment": "Failed to register TTY driver.",
            "statements": [
              "return ldv_undef_int_negative();"
            ]
          },
          "register": {
            "parameters": [
              "%tty_driver%",
              "%tty_operations%"
            ]
          }
        }
      },
      "tty_unregister_driver": {
        "comment": "Unregister a tty device.",
        "headers": [
          "linux/tty.h"
        ],
        "labels": {
          "tty_driver": {
            "parameter": true,
            "interface": [
              "tty.tty_driver"
            ]
          },
          "tty_operations": {
            "interface": [
              "tty.tty_operations"
            ]
          }
        },
        "process": "<assign>.[deregister].<success> | <failed>",
        "actions": {
          "assign": {
            "comment": "Get a tty driver structure.",
            "statements": [
              "%tty_driver% = $ARG1;",
              "%tty_operations% = %tty_driver%->ops;"
            ]
          },
          "deregister": {
            "parameters": [
              "%tty_driver%",
              "%tty_operations%"
            ]
          },
          "success": {
              "comment": "Successfully unregistered TTY driver.",
              "statements": [
                "return 0;"
              ]
          },
          "failed": {
            "comment": "Failed to unregister TTY driver.",
            "statements": [
              "return ldv_undef_int_negative();"
            ]
          }
        }
      }
    },
    "environment processes": {
      "tty_scenario": {
        "comment": "Invoke tty callbacks",
        "labels": {
          "tty_operations": {
            "container": true,
            "interface": [
              "tty.tty_operations"
            ]
          },
          "tty_driver": {
            "container": true,
            "interface": [
              "tty.tty_driver"
            ]
          },
          "tty_struct": {
            "interface": [
              "tty.tty_struct"
            ]
          },
          "file": {
            "interface": [
              "tty.file"
            ]
          },
          "callback": {
            "callback": true
          },
          "ret": {
            "declaration": "int a",
            "value": "1"
          }
        },
        "process": "(!register).<init>.{main}",
        "actions": {
          "main": {
            "comment": "Install tty or deregister.",
            "process": "[install].(<install_success>.[open].(<open_success>.{call} | <open_failed>.[remove]) | <install_failed>).{main} | <free>.(deregister)"
          },
          "call": {
            "comment": "Call rest tty callbacks.",
            "process": "([lookup] | [callback] | [set_termios] | [throttle].[unthrottle] | [start].[stop] | [set_termiox]).{call} | [close].[shutdown].[remove].[cleanup].{main}"
          },
          "register": {
            "parameters": [
              "%tty_driver%",
              "%tty_operations%"
            ]
          },
          "deregister": {
            "condition": [
              "%tty_driver% == $ARG1"
            ],
            "parameters": [
              "%tty_driver%",
              "%tty_operations%"
            ]
          },
          "callback": {
            "callback": "%callback%",
            "parameters": [
              "%tty_struct%"
            ]
          },
          "install_success": {
            "comment": "Successfully installed a new tty into the tty driver internal tables.",
            "condition": [
              "%ret% == 0"
            ]
          },
          "install_failed": {
            "comment": "Failed to install a new tty into the tty driver internal tables.",
            "condition": [
              "%ret% != 0"
            ]
          },
          "open_success": {
            "comment": "Successfully opened a particular tty device.",
            "condition": [
              "%ret% == 0"
            ]
          },
          "open_failed": {
            "comment": "Failed to open a particular tty device.",
            "condition": [
              "%ret% != 0"
            ]
          },
          "init": {
            "comment": "Allocate memory for file structure.",
            "statements": [
              "%file% = $ALLOC(%file%);"
            ]
          },
          "free": {
            "comment": "Free memory of file structure.",
            "statements": [
              "$FREE(%file%);"
            ]
          },
          "lookup": {
            "comment": "Return the tty device corresponding to idx.",
            "callback": "%tty_operations.lookup%",
            "parameters": [
              "%tty_driver%"
            ],
            "callback return value": "%tty_struct%",
            "pre-call": [
              "/* Expect that tty_mutex is locked */"
            ]
          },
          "install": {
            "comment": "Install a new tty into the tty driver internal tables.",
            "callback": "%tty_operations.install%",
            "parameters": [
              "%tty_driver%",
              "%tty_struct%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_filter_err_code(%ret%);"
            ]
          },
          "remove": {
            "comment": "Remove a closed tty from the tty driver internal tables.",
            "callback": "%tty_operations.remove%",
            "parameters": [
              "%tty_driver%",
              "%tty_struct%"
            ]
          },
          "open": {
            "comment": "Open a tty device.",
            "callback": "%tty_operations.open%",
            "parameters": [
              "%tty_struct%",
              "%file%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_filter_err_code(%ret%);"
            ]
          },
          "close": {
            "comment": "Close a tty device.",
            "callback": "%tty_operations.close%",
            "parameters": [
              "%tty_struct%"
            ]
          },
          "shutdown": {
            "comment": "Close a tty device for the last time.",
            "callback": "%tty_operations.shutdown%",
            "parameters": [
              "%tty_struct%"
            ],
            "pre-call": [
              "/* Expect that tty_mutex is locked */"
            ]
          },
          "cleanup": {
            "comment": "Free resources after a tty device has been closed for the last time.",
            "callback": "%tty_operations.cleanup%",
            "parameters": [
              "%tty_struct%"
            ]
          },
          "set_termios": {
            "comment": "Device's termios settings have changed.",
            "callback": "%tty_operations.set_termios%",
            "parameters": [
              "%tty_struct%"
            ],
            "pre-call": [
              "/* Expect that termios mutex is locked */"
            ]
          },
          "set_termiox": {
            "comment": "The device receives a termiox based ioctl.",
            "callback": "%tty_operations.set_termiox%",
            "parameters": [
              "%tty_struct%"
            ],
            "pre-call": [
              "/* Expect that termios mutex is locked */"
            ]
          },
          "throttle": {
            "comment": "Input buffers for the line discipline are close to full.",
            "callback": "%tty_operations.throttle%",
            "parameters": [
              "%tty_struct%"
            ],
            "pre-call": [
              "/* Expect that termios mutex is locked */"
            ]
          },
          "unthrottle": {
            "comment": "Characters can now be sent to the tty without fear of overrunning the input buffers of the line disciplines.",
            "callback": "%tty_operations.unthrottle%",
            "parameters": [
              "%tty_struct%"
            ],
            "pre-call": [
              "/* Expect that termios mutex is locked */"
            ]
          },
          "start": {
            "comment": "Resume sending characters to tty device.",
            "callback": "%tty_operations.start%",
            "parameters": [
              "%tty_struct%"
            ]
          },
          "stop": {
            "comment": "Stop outputting characters to the tty device",
            "callback": "%tty_operations.stop%",
            "parameters": [
              "%tty_struct%"
            ]
          }
        }
      }
    }
  }
}