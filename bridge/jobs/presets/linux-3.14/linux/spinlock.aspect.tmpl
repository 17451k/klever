before: file ("$this")
{
extern void ldv__spin_lock(void *);
extern void ldv__spin_unlock(void *);
extern int ldv__spin_trylock(void *);
extern void ldv__spin_unlock_wait(void *);
extern void ldv__spin_can_lock(void *);
extern int ldv__atomic_dec_and_lock(void *);

// for arg_sign in spinlock_arg_signs
extern void ldv_spin_lock{{ arg_sign.id }}(void);
extern void ldv_spin_unlock{{ arg_sign.id }}(void);
extern int ldv_spin_trylock{{ arg_sign.id }}(void);
extern void ldv_spin_unlock_wait{{ arg_sign.id }}(void);
extern int ldv_spin_is_locked{{ arg_sign.id }}(void);
extern int ldv_spin_can_lock{{ arg_sign.id }}(void);
extern int ldv_spin_is_contended{{ arg_sign.id }}(void);
extern int ldv_atomic_dec_and_lock{{ arg_sign.id }}(void);
// endfor
}

around: define(spin_lock(lock))
{
ldv__spin_lock(lock)
}

around: define(spin_lock_bh(lock))
{
ldv__spin_lock(lock)
}

around: define(spin_lock_irq(lock))
{
ldv__spin_lock(lock)
}

around: define(spin_lock_nested(lock, subclass))
{
ldv__spin_lock(lock)
}

around: define(spin_lock_nest_lock(lock, nest_lock))
{
ldv__spin_lock(lock)
}

around: define(spin_lock_irqsave(lock, flags))
{
ldv__spin_lock(lock)
}

around: define(spin_lock_irqsave_nested(lock, flags, subclass))
{
ldv__spin_lock(lock)
}

before: call(static inline void spin_lock(..)) ||
        call(static inline void spin_lock_bh(..)) ||
        call(static inline void spin_lock_irq(..)) ||
        call(void ldv__spin_lock(..))
{
	ldv_spin_lock{{ spinlock_arg_sign_patterns[1] }}();
}

around: define(spin_unlock(lock))
{
ldv__spin_unlock(lock)
}

around: define(spin_unlock_bh(lock))
{
ldv__spin_unlock(lock)
}

around: define(spin_unlock_irq(lock))
{
ldv__spin_unlock(lock)
}

around: define(spin_unlock_irqrestore(lock, flags))
{
ldv__spin_unlock(lock)
}

before: call(static inline void spin_unlock(..)) ||
        call(static inline void spin_unlock_bh(..)) ||
        call(static inline void spin_unlock_irq(..)) ||
        call(static inline void spin_unlock_irqrestore(..)) ||
        call(void ldv__spin_unlock(..))
{
	ldv_spin_unlock_$arg_sign1();
}

around: define(spin_trylock(lock))
{
ldv__spin_trylock(lock)
}

around: define(spin_trylock_bh(lock))
{
ldv__spin_trylock(lock)
}

around: define(spin_trylock_irq(lock))
{
ldv__spin_trylock(lock)
}

around: define(spin_trylock_irqsave(lock, flags))
{
ldv__spin_trylock(lock)
}

after: call(static inline int spin_trylock(..)) ||
       call(static inline int spin_trylock_bh(..)) ||
       call(static inline int spin_trylock_irq(..)) ||
       call(int ldv__spin_trylock(..))
{
	return ldv_spin_trylock{{ spinlock_arg_sign_patterns[1] }}();
}

around: define(spin_unlock_wait(lock))
{
ldv__spin_unlock_wait(lock)
}

before: call(static inline void spin_unlock_wait(..)) ||
        call(void ldv__spin_unlock_wait(..))
{
	ldv_spin_unlock_wait{{ spinlock_arg_sign_patterns[1] }}();
}

after: call(static inline int spin_is_locked(..))
{
	return ldv_spin_is_locked{{ spinlock_arg_sign_patterns[1] }}();
}

around: define(spin_can_lock(lock))
{
ldv__spin_can_lock(lock)
}

after: call(static inline int spin_can_lock(..)) ||
       call(void ldv__spin_can_lock(..))
{
	return ldv_spin_can_lock{{ spinlock_arg_sign_patterns[1] }}();
}

after: call(static inline int spin_is_contended(..))
{
	return ldv_spin_is_contended{{ spinlock_arg_sign_patterns[1] }}();
}

around: define(atomic_dec_and_lock(atomic, lock))
{
ldv__atomic_dec_and_lock(lock)
}

after: call(int ldv__atomic_dec_and_lock(..))
{ 
	return ldv_atomic_dec_and_lock{{ spinlock_arg_sign_patterns[1] }}();
}
