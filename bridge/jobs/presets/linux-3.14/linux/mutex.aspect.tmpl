before: file ("$this")
{

#include <linux/types.h>


struct mutex;

extern void mutex_lock(struct mutex *lock);
extern void mutex_lock_nested(struct mutex *, unsigned int);
extern int mutex_lock_interruptible(struct mutex *lock);
extern int mutex_lock_killable(struct mutex *lock);

// for arg_sign in mutex_arg_signs
extern int ldv_mutex_lock_interruptible_or_killable{{ arg_sign.id }}(struct mutex *lock);
extern void ldv_mutex_lock_nested{{ arg_sign.id }}(struct mutex *lock, unsigned int subclass);
extern void ldv_mutex_lock{{ arg_sign.id }}(struct mutex *lock);
extern int ldv_mutex_trylock{{ arg_sign.id }}(struct mutex *lock);
extern int ldv_atomic_dec_and_mutex_lock{{ arg_sign.id }}(atomic_t *cnt, struct mutex *lock);
extern int ldv_mutex_is_locked{{ arg_sign.id }}(struct mutex *lock);
extern void ldv_mutex_unlock{{ arg_sign.id }}(struct mutex *lock);
// endfor
}

around: define(mutex_lock_interruptible(lock))
{
mutex_lock_interruptible(lock)
}

around: define(mutex_lock_nested(lock, subclass))
{
mutex_lock_nested(lock, subclass)
}

around: define(mutex_lock_killable(lock))
{
mutex_lock_killable(lock)
}

around: define(mutex_lock(lock))
{
mutex_lock(lock)
}

around: call(void mutex_lock(struct mutex *)) || call(void mutex_lock_nested(struct mutex *, unsigned int))
{
	ldv_mutex_lock{{ arg_signs[1] }}($arg1);
}

around: call(int mutex_lock_interruptible(struct mutex *)) || call(int mutex_lock_killable(struct mutex *))
{
	return ldv_mutex_lock_interruptible_or_killable{{ arg_signs[1] }}($arg1);
}

around: call(static inline int mutex_is_locked(struct mutex *))
{
	return ldv_mutex_is_locked{{ arg_signs[1] }}($arg1);
}

around: call(int mutex_trylock(struct mutex *))
{
	return ldv_mutex_trylock{{ arg_signs[1] }}($arg1);
}

around: call(int atomic_dec_and_mutex_lock(atomic_t *, struct mutex *))
{
	return ldv_atomic_dec_and_mutex_lock{{ arg_signs[2] }}($arg1, $arg2);
}

around: call(void mutex_unlock(struct mutex *))
{
	ldv_mutex_unlock{{ arg_signs[1] }}($arg1);
}

around: call(static inline int kref_put_mutex(..))
{
	if ($arg_value2)
	{
		ldv_mutex_lock{{ arg_signs[3] }}($arg3);
		$arg_value2($arg1);
		return 1;
	}
	else
	{
		return 0;
	}
}
