{
  "kernel functions": {
    "usb_reset_device": {
      "signature": "int usb_reset_device(struct usb_device)",
      "header": "linux/usb.h"
    },
    "usb_register_driver": {
      "signature": "int usb_register_driver(*%usb.usb_driver%, $, $)",
      "header": "linux/usb.h"
    },
    "usb_deregister": {
      "signature": "void usb_deregister(*%usb.usb_driver%)",
      "header": "linux/usb.h"
    },
    "usb_serial_register_drivers": {
      "signature": "int usb_serial_register_drivers($, $, %usb_serial.usb_device_id%)",
      "headers": ["linux/usb.h", "linux/usb/serial.h"]
    },
    "usb_serial_deregister_drivers": {
      "signature": "void usb_serial_deregister_drivers($)",
      "headers": ["linux/usb.h", "linux/usb/serial.h"]
    },
    "platform_driver_unregister": {
      "signature": "void platform_driver_unregister(*%platform.platform_driver%)",
      "header": "linux/platform_device.h"
    },
    "platform_driver_probe": {
      "signature": "int platform_driver_probe(*%platform.platform_driver%, %platform.probe%)",
      "header": "linux/platform_device.h"
    },
    "platform_driver_register": {
      "signature": "int platform_driver_register(*%platform.platform_driver%)",
      "header": "linux/platform_device.h"
    },
    "alloc_netdev_mqs": {
      "signature": "*%net.net_device% alloc_netdev_mqs($, $, %net.setup%, $, $)",
      "header": "linux/netdevice.h"
    },
    "register_netdev": {
      "signature": "int register_netdev(*%net.net_device%)",
      "header": "linux/netdevice.h"
    },
    "unregister_netdev": {
      "signature": "void unregister_netdev(*%net.net_device%)",
      "header": "linux/netdevice.h"
    },
    "free_netdev": {
      "signature": "void free_netdev(*%net.net_device%)",
      "header": "linux/netdevice.h"
    },
    "mod_timer": {
      "signature": "int mod_timer(*%timer.timer_list%, $)",
      "header": "linux/timer.h"
    },
    "mod_timer_pinned": {
      "signature": "int mod_timer_pinned(*%timer.timer_list%, $)",
      "header": "linux/timer.h"
    },
    "mod_timer_pending": {
      "signature": "int mod_timer_pending(*%timer.timer_list%, $)",
      "header": "linux/timer.h"
    },
    "del_timer": {
      "signature": "int del_timer(*%timer.timer_list%)",
      "header": "linux/timer.h"
    },
    "del_timer_sync": {
      "signature": "int del_timer_sync(*%timer.timer_list%)",
      "header": "linux/timer.h"
    },
    "try_to_del_timer_sync": {
      "signature": "int try_to_del_timer_sync(*%timer.timer_list%)",
      "header": "linux/timer.h"
    },
    "request_threaded_irq": {
      "signature": "int request_threaded_irq(%interrupt.line%, %interrupt.handler%, %interrupt.thread%, $, $, %interrupt.data%)",
      "header": "linux/interrupt.h"
    },
    "request_irq": {
      "signature": "int request_irq(%interrupt.line%, %interrupt.handler%, $, $, %interrupt.data%)",
      "header": "linux/interrupt.h"
    },
    "seq_open_private": {
      "signature": "int seq_open_private(%seq_operations.file%, *%seq_operations.seq_operations%, $)",
      "header": "linux/seq_file.h"
    },
    "seq_release_private": {
      "signature": "int seq_release_private($, %seq_operations.file%)",
      "header": "linux/seq_file.h"
    },
    "seq_open": {
      "signature": "int seq_open(%seq_operations.file%, *%seq_operations.seq_operations%)",
      "header": "linux/seq_file.h"
    },
    "seq_release": {
      "signature": "int seq_release($, %seq_operations.file%)",
      "header": "linux/seq_file.h"
    },
    "devm_request_threaded_irq": {
      "signature": "int devm_request_threaded_irq($, %interrupt.line%, %interrupt.handler%, %interrupt.thread%, $, $, %interrupt.data%)",
      "header": "linux/interrupt.h"
    },
    "free_irq": {
      "signature": "void free_irq(%interrupt.line%, %interrupt.data%)",
      "header": "linux/interrupt.h"
    },
    "i2c_register_driver": {
      "signature": "int i2c_register_driver($, *%i2c.i2c_driver%)",
      "header": "linux/i2c.h"
    },
    "i2c_del_driver": {
      "signature": "void i2c_del_driver(*%i2c.i2c_driver%)",
      "header": "linux/i2c.h"
    },
    "transport_subsystem_register": {
      "signature": "int transport_subsystem_register(*%se_subsystem.se_subsystem_api%)",
      "header": "target/target_core_backend.h"
    },
    "transport_subsystem_release": {
      "signature": "void transport_subsystem_release(*%se_subsystem.se_subsystem_api%)",
      "header": "target/target_core_backend.h"
    },
    "cdev_init": {
      "signature": "void cdev_init(*%file_operations.cdev%, *%file_operations.file_operations%)",
      "header": "linux/cdev.h"
    },
    "misc_register": {
      "signature": "int misc_register(*%file_operations.miscdevice%)",
      "header": "linux/miscdevice.h"
    },
    "cdev_del": {
      "signature": "void cdev_del(*%file_operations.cdev%)",
      "header": "linux/cdev.h"
    },
    "misc_deregister": {
      "signature": "void misc_deregister(*%file_operations.miscdevice%)",
      "header": "linux/miscdevice.h"
    },
    "ieee80211_alloc_hw": {
      "signature": "*%ieee80211.ieee80211_hw% ieee80211_alloc_hw($, *%ieee80211.ieee80211_ops%)",
      "header": "net/mac80211.h"
    },
    "ieee80211_free_hw": {
      "signature": "void ieee80211_free_hw(*%ieee80211.ieee80211_hw%)",
      "header": "net/mac80211.h"
    },
    "iio_triggered_buffer_setup": {
      "signature": "int iio_triggered_buffer_setup(%iio_triggered_buffer.dev%, %iio_triggered_buffer.handler%, %iio_triggered_buffer.thread%, $)",
      "header": "linux/iio/triggered_buffer.h"
    },
    "iio_triggered_buffer_cleanup": {
      "signature": "void iio_triggered_buffer_cleanup(%iio_triggered_buffer.dev%)",
      "header": "linux/iio/triggered_buffer.h"
    }
  },
  "kernel macro-functions": {},
  "categories": {
    "usb": {
      "containers": {
        "usb_driver": {
          "header": "linux/usb.h",
          "signature": "struct usb_driver driver",
          "fields": {
            "probe": "%usb.probe%",
            "pre_reset": "%usb.pre%",
            "post_reset": "%usb.post%",
            "disconnect": "%usb.release%",
            "suspend": "%usb.suspend%",
            "resume": "%usb.resume%"
          }
        }
      },
      "callbacks": {
        "probe": {
          "signature": "int (*probe) (%usb.usb_interface%, const struct usb_device_id *id)"
        },
        "pre": {
          "signature": "int (*pre) (%usb.usb_interface%)"
        },
        "post": {
          "signature": "int (*post) (%usb.usb_interface%)"
        },
        "release": {
          "signature": "void (*release) (%usb.usb_interface%)"
        },
        "suspend": {
          "signature": "int (*suspend) (%usb.usb_interface%, $)"
        },
        "resume": {
          "signature": "int (*resume) (%usb.usb_interface%)"
        }
      },
      "resources": {
        "usb_interface": {
          "signature": "struct usb_interface *usb_interface",
          "header": "linux/usb.h",
          "implemented in kernel": true
        }
      }
    },
    "usb_serial": {
      "containers": {
        "usb_serial_driver": {
          "headers": ["linux/usb.h", "linux/usb/serial.h"],
          "signature": "struct usb_serial_driver driver",
          "fields": {
            "probe": "%usb_serial.probe%",
            "attach": "%usb_serial.attach%",
            "disconnect": "%usb_serial.disconnect%",
            "release": "%usb_serial.release%",
            "suspend": "%usb_serial.suspend%",
            "resume": "%usb_serial.resume%",
            "reset_resume": "%usb_serial.reset_resume%",
            "port_probe": "%usb_serial.port_probe%",
            "port_remove": "%usb_serial.port_remove%",
            "open": "%usb_serial.open%",
            "close": "%usb_serial.close%",
            "write": "%usb_serial.write%",
            "write_room": "%usb_serial.write_room%",
            "ioctl": "%usb_serial.ioctl%"
          }
        }
      },
      "callbacks": {
        "probe": {
          "signature": "int (*probe)(%usb_serial.usb_serial%, %usb_serial.usb_device_id%)"
        },
        "attach": {
          "signature": "int (*attach)(%usb_serial.usb_serial%)"
        },
        "disconnect": {
          "signature": "void (*disconnect)(%usb_serial.usb_serial%)"
        },
        "release": {
          "signature": "void (*release)(%usb_serial.usb_serial%)"
        },
        "suspend": {
          "signature": "int (*suspend)(%usb_serial.usb_serial%, pm_message_t message)"
        },
        "resume": {
          "signature": "int (*resume)(%usb_serial.usb_serial%)"
        },
        "reset_resume": {
          "signature": "int (*reset_resume)(%usb_serial.usb_serial%)"
        },
        "port_probe": {
          "signature": "int (*port_probe)(%usb_serial.usb_serial_port%)"
        },
        "port_remove": {
          "signature": "int (*port_remove)(%usb_serial.usb_serial_port%)"
        },
        "open": {
          "signature": "int (*open)(%usb_serial.tty_struct%, %usb_serial.usb_serial_port%)"
        },
        "close": {
          "signature": "void (*close)(%usb_serial.usb_serial_port%)"
        },
        "write": {
          "signature": "int (*write)(%usb_serial.tty_struct%, %usb_serial.usb_serial_port%, const unsigned char *buf, int count)"
        },
        "write_room": {
          "signature": "int (*write_room)(%usb_serial.tty_struct%)"
        },
        "ioctl": {
          "signature": "int (*ioctl)(%usb_serial.tty_struct%, unsigned int cmd, long unsigned int arg)"
        }
      },
      "resources": {
        "usb_device_id": {
          "signature": "const struct usb_device_id *id",
          "header": "linux/mod_devicetable.h",
          "implemented in kernel": false
        },
        "usb_serial": {
          "signature": "struct usb_serial *serial",
          "headers": ["linux/usb.h", "linux/usb/serial.h"],
          "implemented in kernel": true
        },
        "usb_serial_port": {
          "signature": "struct usb_serial_port *port",
          "headers": ["linux/usb.h", "linux/usb/serial.h"],
          "implemented in kernel": true
        },
        "tty_struct": {
          "signature": "struct tty_struct *tty",
          "header": "linux/tty.h",
          "implemented in kernel": true
        }
      }
    },
    "net": {
      "containers": {
        "net_device": {
          "signature": "struct net_device net_device",
          "header": "linux/netdevice.h",
          "fields": {
            "netdev_ops": "*%net.net_device_ops%",
            "ethtool_ops": "*%net.ethtool_ops%"
          }
        },
        "net_device_ops": {
          "signature": "struct net_device_ops net_device_ops",
          "header": "linux/netdevice.h",
          "fields": {
            "ndo_open": "%net.ndo_open%",
            "ndo_stop": "%net.ndo_stop%"
          }
        },
        "ethtool_ops": {
          "signature": "struct ethtool_ops ethtool_ops",
          "header": "linux/netdevice.h"
        }
      },
      "callbacks": {
        "ndo_open": {
          "signature": "int (*ndo_open)(*%net.net_device%)"
        },
        "ndo_stop": {
          "signature": "int (*ndo_stop)(*%net.net_device%)"
        },
        "setup": {
          "signature": "void (*setup)(*%net.net_device%)"
        }
      }
    },
    "ieee80211": {
      "containers": {
        "ieee80211_ops": {
          "signature": "struct ieee80211_ops a",
          "header": "net/mac80211.h",
          "fields": {
            "start": "%ieee80211.start%",
            "stop": "%ieee80211.stop%",
            "suspend": "%ieee80211.suspend%",
            "resume": "%ieee80211.resume%"
          }
        }
      },
      "callbacks": {
        "start": {
          "signature": "int (*start)(%ieee80211.ieee80211_hw%)"
        },
        "stop": {
          "signature": "void (*stop)(%ieee80211.ieee80211_hw%)"
        },
        "suspend": {
          "signature": "int (*suspend)(%ieee80211.ieee80211_hw%, $)"
        },
        "resume": {
          "signature": "int (*resume)(%ieee80211.ieee80211_hw%)"
        }
      },
      "resources": {
        "ieee80211_hw": {
          "signature": "struct ieee80211_hw *a"
        }
      }
    },
    "proto": {
      "containers": {
        "proto_ops": {
          "signature": "struct proto_ops ops",
          "header": "linux/net.h",
          "fields": {
            "bind": "%proto.probe%",
            "release": "%proto.release%"
          }
        }
      },
      "resources": {
        "socket": {
          "signature": "struct socket *socket"
        }
      },
      "callbacks": {
        "probe": {
          "signature": "int (*probe)(%proto.socket%, $, $)"
        },
        "release": {
          "signature": "int (*release)(%proto.socket%)"
        }
      }
    },
    "device_driver": {
      "containers": {
        "device_driver": {
          "signature": "struct device_driver driver",
          "header": "linux/device.h"
        }
      }
    },
    "pm": {
      "containers": {
        "dev_pm_ops": {
          "signature": "struct dev_pm_ops",
          "header": "linux/pm.h",
          "fields": {
            "prepare": "%pm.prepare%",
            "complete": "%pm.complete%",
            "suspend": "%pm.suspend%",
            "resume": "%pm.resume%",
            "freeze": "%pm.freeze%",
            "thaw": "%pm.thaw%",
            "poweroff": "%pm.poweroff%",
            "restore": "%pm.restore%",
            "suspend_late": "%pm.suspend_late%",
            "resume_early": "%pm.resume_early%",
            "freeze_late": "%pm.freeze_late%",
            "thaw_early": "%pm.thaw_early%",
            "poweroff_late": "%pm.poweroff_late%",
            "restore_early": "%pm.restore_early%",
            "suspend_noirq": "%pm.suspend_noirq%",
            "resume_noirq": "%pm.resume_noirq%",
            "freeze_noirq": "%pm.freeze_noirq%",
            "thaw_noirq": "%pm.thaw_noirq%",
            "poweroff_noirq": "%pm.poweroff_noirq%",
            "restore_noirq": "%pm.restore_noirq%",
            "runtime_suspend": "%pm.runtime_suspend%",
            "runtime_resume": "%pm.runtime_resume%",
            "runtime_idle": "%pm.runtime_idle%"
          }
        }
      },
      "resources": {
        "device": {
          "signature": "struct device *dev",
          "implemented in kernel": true
        }
      },
      "callbacks": {
        "prepare": {
            "signature": "int (*prepare)(%pm.device%)"
        },
        "complete": {
            "signature": "void (*complete)(%pm.device%)"
        },
        "suspend": {
            "signature": "int (*suspend)(%pm.device%)"
        },
        "resume": {
            "signature": "int (*resume)(%pm.device%)"
        },
        "freeze": {
            "signature": "int (*freeze)(%pm.device%)"
        },
        "thaw": {
            "signature": "int (*thaw)(%pm.device%)"
        },
        "poweroff": {
            "signature": "int (*poweroff)(%pm.device%)"
        },
        "restore": {
            "signature": "int (*restore)(%pm.device%)"
        },
        "suspend_late": {
            "signature": "int (*suspend_late)(%pm.device%)"
        },
        "resume_early": {
            "signature": "int (*resume_early)(%pm.device%)"
        },
        "freeze_late": {
            "signature": "int (*freeze_late)(%pm.device%)"
        },
        "thaw_early": {
            "signature": "int (*thaw_early)(%pm.device%)"
        },
        "poweroff_late": {
            "signature": "int (*poweroff_late)(%pm.device%)"
        },
        "restore_early": {
            "signature": "int (*restore_early)(%pm.device%)"
        },
        "suspend_noirq": {
            "signature": "int (*suspend_noirq)(%pm.device%)"
        },
        "resume_noirq": {
            "signature": "int (*resume_noirq)(%pm.device%)"
        },
        "freeze_noirq": {
            "signature": "int (*freeze_noirq)(%pm.device%)"
        },
        "thaw_noirq": {
            "signature": "int (*thaw_noirq)(%pm.device%)"
        },
        "poweroff_noirq": {
            "signature": "int (*poweroff_noirq)(%pm.device%)"
        },
        "restore_noirq": {
            "signature": "int (*restore_noirq)(%pm.device%)"
        },
        "runtime_suspend": {
            "signature": "int (*runtime_suspend)(%pm.device%)"
        },
        "runtime_resume": {
            "signature": "int (*runtime_resume)(%pm.device%)"
        },
        "runtime_idle": {
            "signature": "int (*runtime_idle)(%pm.device%)"
        }
      }
    },
    "platform": {
      "containers": {
        "platform_driver": {
          "signature": "struct platform_driver driver",
          "header": "linux/platform_device.h",
          "fields": {
            "probe": "%platform.probe%",
            "remove": "%platform.release%"
          }
        }
      },
      "resources": {
        "platform_device": {
          "signature": "struct platform_device *device",
          "header": "linux/platform_device.h",
          "implemented in kernel": true
        }
      },
      "callbacks": {
        "probe": {
          "signature": "int (*probe)(%platform.platform_device%)"
        },
        "release": {
          "signature": "int (*release)(%platform.platform_device%)"
        }
      }
    },
    "file_operations": {
      "containers": {
        "file_operations": {
          "signature": "struct file_operations ops",
          "header": "linux/fs.h",
          "fields": {
            "release": "%file_operations.release%",
            "open": "%file_operations.probe%"
          }
        },
        "cdev": {
          "signature": "struct cdev cdev",
          "header": "linux/cdev.h",
          "fields": {
            "ops": "*%file_operations.file_operations%"
          }
        },
        "miscdevice": {
          "signature": "struct miscdevice dev",
          "header": "linux/miscdevice.h",
          "fields": {
            "fops": "*%file_operations.file_operations%"
          }
        }
      },
      "resources": {
        "file": {
          "signature": "struct file *file"
        },
        "inode": {
          "signature": "struct inode *inode"
        }
      },
      "callbacks": {
        "probe": {
          "signature": "int (*probe) (%file_operations.inode%, %file_operations.file%)"
        },
        "release": {
          "signature": "$ (*release) (%file_operations.inode%, %file_operations.file%)"
        }
      }
    },
    "v4l2_file_operations": {
      "containers": {
        "v4l2_file_operations": {
          "signature": "struct v4l2_file_operations ops",
          "header": "media/v4l2-dev.h",
          "fields": {
            "release": "%v4l2_file_operations.release%",
            "open": "%v4l2_file_operations.probe%"
          }
        }
      },
      "resources": {
        "file": {
          "signature": "struct file *file"
        }
      },
      "callbacks": {
        "probe": {
          "signature": "int (*probe) (%v4l2_file_operations.file%)"
        },
        "release": {
          "signature": "$ (*release) (%v4l2_file_operations.file%)"
        }
      }
    },
    "i2c": {
      "containers": {
        "i2c_driver": {
          "signature": "struct i2c_driver driver",
          "header": "linux/i2c.h",
          "fields": {
            "remove": "%i2c.release%"
          }
        }
      },
      "resources": {
        "client": {
          "signature": "struct i2c_client *client"
        }
      },
      "callbacks": {
        "release": {
          "signature": "int (*release)(%i2c.client%)"
        }
      }
    },
    "Qdisc": {
      "containers": {
        "Qdisc_ops": {
          "signature": "struct Qdisc_ops ops",
          "header": "net/sch_generic.h",
          "fields": {
            "init": "%Qdisc.probe%",
            "destroy": "%Qdisc.release%"
          }
        }
      },
      "resources": {
        "Qdisc": {
          "signature": "struct Qdisc *disc"
        }
      },
      "callbacks": {
        "probe": {
          "signature": "int (*probe)(%Qdisc.Qdisc%, $)"
        },
        "release": {
          "signature": "void (*release)(%Qdisc.Qdisc%)"
        }
      }
    },
    "se_subsystem": {
      "containers": {
        "se_subsystem_api": {
          "signature": "struct se_subsystem_api ops",
          "header": "target/target_core_backend.h",
          "fields": {
            "alloc_device": "%se_subsystem.alloc%",
            "free_device": "%se_subsystem.free%",
            "attach_hba": "%se_subsystem.attach_hba%",
            "detach_hba": "%se_subsystem.detach_hba%"
          }
        }
      },
      "resources": {
        "se_device": {
          "signature": "struct se_device *r"
        },
        "se_hba": {
          "signature": "struct se_hba *r"
        }
      },
      "callbacks": {
        "alloc": {
          "signature": "%se_subsystem.se_device% (*alloc)(%se_subsystem.se_hba%, $)"
        },
        "free": {
          "signature": "void (*free)(%se_subsystem.se_device%)"
        },
        "attach_hba": {
          "signature": "int (*attach_hba)(%se_subsystem.se_hba%, $)"
        },
        "detach_hba": {
          "signature": "void (*detach_hba)(%se_subsystem.se_hba%)"
        }
      }
    },
    "seq_operations": {
      "containers": {
        "seq_operations": {
          "signature": "struct seq_operations ops",
          "header": "linux/seq_file.h",
          "fields": {
            "start": "%seq_operations.start%",
            "stop": "%seq_operations.stop%",
            "next": "%seq_operations.next%",
            "show": "%seq_operations.show%"
          }
        }
      },
      "resources": {
        "seq_file": {
          "signature": "struct seq_file *file"
        },
        "file": {
          "signature": "struct file *file"
        }
      },
      "callbacks": {
        "start": {
          "signature": "void * (*start)(%seq_operations.seq_file%, $)"
        },
        "stop": {
          "signature": "void (*stop)(%seq_operations.seq_file%, $)"
        },
        "next": {
          "signature": "void * (*next)(%seq_operations.seq_file%, $, $)"
        },
        "show": {
          "signature": "int (*show)(%seq_operations.seq_file%, $)"
        }
      }
    },
    "timer": {
      "extensible": false,
      "containers": {
        "timer_list": {
          "signature": "struct timer_list list",
          "header": "linux/timer.h",
          "fields": {
            "data": "%timer.data%",
            "function": "%timer.handler%"
          }
        }
      },
      "resources": {
        "data": {
          "signature": "unsigned long data"
        }
      },
      "callbacks": {
        "handler": {
          "signature": "void (*handler)(%timer.data%)",
          "interrupt context": true
        }
      }
    },
    "interrupt": {
      "extensible": false,
      "containers": {},
      "resources": {
        "line": {
          "signature": "int line"
        },
        "data": {
          "signature": "void *data"
        }
      },
      "callbacks": {
        "handler": {
          "signature": "irqreturn_t (*handler)(%interrupt.line%, %interrupt.data%)",
          "interrupt context": true
        },
        "thread": {
          "signature": "irqreturn_t (*thread)(%interrupt.line%, %interrupt.data%)"
        }
      }
    },
    "iio_triggered_buffer": {
      "extensible": false,
      "containers": {},
      "resources": {
        "line": {
          "signature": "int line"
        },
        "data": {
          "signature": "void *data"
        },
        "dev": {
          "signature": "struct iio_dev *dev",
          "header": "linux/iio/iio.h"
        }
      },
      "callbacks": {
        "handler": {
          "signature": "irqreturn_t (*handler)(%iio_triggered_buffer.line%, %iio_triggered_buffer.data%)",
          "interrupt context": true
        },
        "thread": {
          "signature": "irqreturn_t (*thread)(%iio_triggered_buffer.line%, %iio_triggered_buffer.data%)"
        }
      }
    }
  }
}
