{
  "kernel model": {
    "usb_reset_device": {
      "labels": {},
      "process": "[@usb_reset]",
      "actions": {
        "usb_reset": {
          "parameters": []
        }
      }
    },
    "usb_register_driver": {
      "labels": {
        "usb_driver": {
          "container": true,
          "parameter": true,
          "interface": ["usb.usb_driver"]
        }
      },
      "process": "<pre>.(<assign>.[register] | <none>)",
      "actions": {
        "register": {
          "parameters": [
            "%usb_driver%"
          ]
        },
        "pre": {
          "statements": [
            "$res = ldv_pre_usb_register_driver();"
          ]
        },
        "assign": {
          "condition": ["$res == 0"],
          "statements": [
            "%usb_driver% = $arg1;"
          ]
        },
        "none": {
          "condition": ["$res != 0"]
        }
      }
    },
    "usb_deregister": {
      "labels": {
        "usb_driver": {
          "container": true,
          "parameter": true,
          "interface": ["usb.usb_driver"]
        }
      },
      "process": "<assign>.[deregister]",
      "actions": {
        "deregister": {
          "parameters": [
            "%usb_driver%"
          ]
        },
        "assign": {
          "statements": [
            "%usb_driver% = $arg1;"
          ]
        }
      }
    },
    "usb_serial_register_drivers": {
      "labels": {
        "usb_device_id": {
          "resource": true,
          "parameter": true,
          "interface": ["usb_serial.usb_device_id"]
        }
      },
      "process": "<assign>.[@register] | <none>",
      "actions": {
        "register": {
          "parameters": [
            "%usb_device_id%"
          ]
        },
        "assign": {
          "condition": ["$res == 0"],
          "statements": [
            "%usb_device_id% = $arg3;"
          ]
        },
        "none": {
          "condition": ["$res != 0"]
        }
      }
    },
    "usb_serial_deregister_drivers": {
      "labels": {
        "usb_device_id": {
          "resource": true,
          "interface": ["usb_serial.usb_device_id"]
        }
      },
      "process": "<assign>.[@deregister]",
      "actions": {
        "deregister": {
          "parameters": [
            "%usb_device_id%"
          ]
        },
        "assign": {
          "statements": [
            "%usb_device_id% = $arg1;"
          ]
        }
      }
    },
    "alloc_etherdev_mqs": {
      "labels": {
        "netdev": {
          "container": true,
          "pointer": true,
          "interface": ["net.net_device"]
        }
      },
      "process": "<alloc>.<success> | <fail>",
      "actions": {
        "alloc": {
          "statements": [
            "%netdev% = $ALLOC(%netdev%);"
          ]
        },
        "success": {
          "statements": [
            "return %netdev%;"
          ]
        },
        "fail":{
           "statements": [
            "return 0;"
          ]
        }
      }
    },
    "alloc_netdev_mqs": {
      "labels": {
        "netdev": {
          "container": true,
          "pointer": true,
          "interface": ["net.net_device"]
        },
        "setup": {
          "callback": true,
          "parameter": true,
          "interface": ["net.setup"]
        }
      },
      "process": "<alloc>.[setup].<success> | <fail>",
      "actions": {
        "alloc": {
          "statements": [
            "%netdev% = $ALLOC(%netdev%);",
            "%setup% = $arg3;"
          ]
        },
        "setup": {
          "callback": "%setup%",
          "parameters": [
            "%netdev%"
          ]
        },
        "success": {
          "statements": [
            "return %netdev%;"
          ]
        },
        "fail":{
           "statements": [
            "return 0;"
          ]
        }
      }
    },
    "free_netdev": {
      "labels": {
        "netdev": {
          "container": true,
          "parameter": true,
          "interface": ["net.net_device"]
        }
      },
      "process": "<free>",
      "actions": {
        "free": {
          "statements": [
            "%netdev% = $arg1;",
            "$FREE(%netdev%);"
          ]
        }
      }
    },
    "register_netdev": {
      "labels": {
        "netdev": {
          "container": true,
          "parameter": true,
          "interface": ["net.net_device"]
        },
        "ret": {
          "signature": "int a",
          "value": "1"
        }
      },
      "process": "<pre>.(<y_ret>.[open].(<y_ret>.[register] | <n_ret>) | <n_ret>).<return>",
      "actions": {
        "pre": {
          "statements": [
            "%ret% = ldv_pre_register_netdev();",
            "%netdev% = $arg1;"
          ]
        },
        "open": {
          "callback": "%netdev.net_device_ops.ndo_open%",
          "parameters": [
            "%netdev%"
          ],
          "callback return value": "%ret%",
          "post-call": [
            "%ret% = ldv_post_probe(%ret%);"
          ]
        },
        "register": {
          "parameters": [
            "%netdev%"
          ]
        },
        "return": {
          "statements": [
            "return %ret%;"
          ]
        },
        "y_ret": {
          "condition": ["%ret% == 0"]
        },
        "n_ret": {
          "condition": ["%ret% != 0"]
        }
      }
    },
    "unregister_netdev": {
      "labels": {
        "netdev": {
          "container": true,
          "parameter": true,
          "interface": ["net.net_device"]
        }
      },
      "process": "<assign>.[stop].[deregister]",
      "actions": {
        "stop": {
          "callback": "%netdev.net_device_ops.ndo_stop%",
          "parameters": [
            "%netdev%"
          ]
        },
        "deregister": {
          "parameters": [
            "%netdev%"
          ]
        },
        "assign": {
          "statements": [
            "%netdev% = $arg1;"
          ]
        }
      }
    },
    "__platform_driver_register": {
      "labels": {
        "platform_driver": {
          "container": true,
          "parameter": true,
          "interface": ["platform.platform_driver"]
        }
      },
      "process": "<assign>.[register] | <none>",
      "actions": {
        "register": {
          "parameters": [
            "%platform_driver%"
          ]
        },
        "none": {
          "condition": ["$res != 0"]
        },
        "assign": {
          "condition": ["$res == 0"],
          "statements": [
            "%platform_driver% = $arg1;"
          ]
        }
      }
    },
    "platform_driver_probe": {
      "labels": {
        "platform_driver": {
          "container": true,
          "parameter": true,
          "interface": ["platform.platform_driver"]
        },
        "probe": {
          "callback": true,
          "parameter": true,
          "interface": ["platform.probe"]
        }
      },
      "process": "<assign>.[register] | <none>",
      "actions": {
        "register": {
          "parameters": [
            "%platform_driver%"
          ]
        },
        "none": {
          "condition": ["$res != 0"]
        },
        "assign": {
          "condition": ["$res == 0"],
          "statements": [
            "%platform_driver% = $arg1;",
            "%probe% = $arg2;",
            "%platform_driver.probe%=%probe%;"
          ]
        }
      }
    },
    "platform_driver_unregister": {
      "labels": {
        "platform_driver": {
          "container": true,
          "parameter": true,
          "interface": ["platform.platform_driver"]
        }
      },
      "process": "<assign>.[deregister]",
      "actions": {
        "deregister": {
          "parameters": [
            "%platform_driver%"
          ]
        },
        "assign": {
          "statements": [
            "%platform_driver% = $arg1;"
          ]
        }
      }
    },
    "transport_subsystem_register": {
      "labels": {
        "se_subsystem_api": {
          "container": true,
          "parameter": true,
          "interface": ["se_subsystem.se_subsystem_api"]
        }
      },
      "process": "<assign>.[register] | <none>",
      "actions": {
        "register": {
          "parameters": [
            "%se_subsystem_api%"
          ]
        },
        "none": {
          "condition": ["$res != 0"]
        },
        "assign": {
          "condition": ["$res == 0"],
          "statements": [
            "%se_subsystem_api% = $arg1;"
          ]
        }
      }
    },
    "transport_subsystem_release": {
      "labels": {
        "se_subsystem_api": {
          "container": true,
          "parameter": true,
          "interface": ["se_subsystem.se_subsystem_api"]
        }
      },
      "process": "<assign>.[deregister]",
      "actions": {
        "deregister": {
          "parameters": [
            "%se_subsystem_api%"
          ]
        },
        "assign": {
          "statements": [
            "%se_subsystem_api% = $arg1;"
          ]
        }
      }
    },
    "mod_timer, mod_timer_pinned, mod_timer_pending": {
      "labels": {
        "timer_list": {
          "container": true,
          "parameter": true,
          "interface": ["timer.timer_list"]
        }
      },
      "process": "<assign>.[instance_register] | <none>",
      "actions": {
        "instance_register": {
          "parameters": [
            "%timer_list%"
          ]
        },
        "none": {
          "condition": ["$res != 0"]
        },
        "assign": {
          "condition": ["$res == 0"],
          "statements": [
            "%timer_list% = $arg1;"
          ]
        }
      }
    },
    "setup_timer, setup_timer_on_stack": {
      "labels": {
        "timer_list": {
          "container": true,
          "parameter": true,
          "interface": ["timer.timer_list"]
        },
        "data": {
          "resource": true,
          "parameter": true,
          "interface": ["timer.data"]
        },
        "function": {
          "callback": true,
          "parameter": true,
          "interface": ["timer.callback"]
        }
      },
      "process": "<assign>.[instance_register] | <none>",
      "actions": {
        "instance_register": {
          "parameters": [
            "%timer_list%"
          ]
        },
        "none": {
          "condition": ["$res != 0"]
        },
        "assign": {
          "condition": ["$res == 0"],
          "statements": [
            "%timer_list% = $arg1;",
            "%function% = $arg2",
            "%data% = $arg3",
            "%timer_list.data%=%data%;",
            "%timer_list.function%=%function%;"
          ]
        }
      }
    },
    "seq_open, seq_open_private": {
      "labels": {
        "file": {
          "parameter": true,
          "resource": true,
          "interface": ["seq_operations.file"]
        },
        "ops": {
          "container": true,
          "parameter": true,
          "interface": ["seq_operations.seq_operations"]
        },
        "seq_file": {
          "resource": true,
          "interface": ["seq_operations.seq_file"]
        }
      },
      "process": "<assign>.[register]",
      "actions": {
        "register": {
          "parameters": ["%seq_file%", "%ops%"]
        },
        "assign": {
          "statements": [
            "%seq_file% = $ALLOC(%seq_file%);",
            "%ops% = $arg2;",
            "/* todo: file->private_data = seq_file; */"
          ]
        }
      }
    },
    "seq_release, seq_release_private": {
      "labels": {
        "file": {
          "parameter": true,
          "resource": true,
          "interface": ["seq_operations.file"]
        },
        "seq_file": {
          "resource": true,
          "interface": ["seq_operations.seq_file"]
        }
      },
      "process": "<assign>.[deregister]",
      "actions": {
        "deregister": {
          "parameters": ["%seq_file%"]
        },
        "assign": {
          "statements": [
            "/* todo: seq_file = file->private_data; */",
            "/* todo: FREE(seq_file); */"
          ]
        }
      }
    },
    "del_timer, try_to_del_timer_sync, del_timer_sync": {
      "labels": {
        "timer_list": {
          "container": true,
          "parameter": true,
          "interface": ["timer.timer_list"]
        }
      },
      "process": "<assign>.[instance_deregister]",
      "actions": {
        "instance_deregister": {
          "parameters": [
            "%timer_list%"
          ]
        },
        "assign": {
          "statements": [
            "%timer_list% = $arg1;"
          ]
        }
      }
    },
    "request_threaded_irq": {
      "labels": {
        "thread": {
          "callback": true,
          "interface": ["interrupt.thread"],
          "parameter": true
        },
        "callback": {
          "callback": true,
          "interface": ["interrupt.handler"],
          "parameter": true
        },
        "line": {
          "resource": true,
          "interface": ["interrupt.line"],
          "parameter": true
        },
        "data": {
          "resource": true,
          "interface": ["interrupt.data"],
          "parameter": true
        }
      },
      "process": "<assign>.[irq_register] | <none>",
      "actions": {
        "irq_register": {
          "parameters": [
            "%line%",
            "%callback%",
            "%thread%",
            "%data%"
          ]
        },
        "none": {
          "condition": ["$res != 0"]
        },
        "assign": {
          "condition": ["$res == 0"],
          "statements": [
            "%line% = $arg1;",
            "%callback% = $arg2;",
            "%thread% = $arg3;",
            "%data% = $arg6;"
          ]
        }
      }
    },
    "devm_request_threaded_irq": {
      "labels": {
        "thread": {
          "callback": true,
          "interface": ["interrupt.thread"],
          "parameter": true
        },
        "callback": {
          "callback": true,
          "interface": ["interrupt.handler"],
          "parameter": true
        },
        "line": {
          "resource": true,
          "interface": ["interrupt.line"],
          "parameter": true
        },
        "data": {
          "resource": true,
          "interface": ["interrupt.data"],
          "parameter": true
        }
      },
      "process": "<assign>.[irq_register] | <none>",
      "actions": {
        "irq_register": {
          "parameters": [
            "%line%",
            "%callback%",
            "%thread%",
            "%data%"
          ]
        },
        "none": {
          "condition": ["$res != 0"]
        },
        "assign": {
          "condition": ["$res == 0"],
          "statements": [
            "%line% = $arg2;",
            "%callback% = $arg3;",
            "%thread% = $arg4;",
            "%data% = $arg7;"
          ]
        }
      }
    },
    "request_irq": {
      "labels": {
        "thread": {
          "callback": true,
          "interface": ["interrupt.thread"]
        },
        "callback": {
          "callback": true,
          "interface": ["interrupt.handler"],
          "parameter": true
        },
        "line": {
          "resource": true,
          "interface": ["interrupt.line"],
          "parameter": true
        },
        "data": {
          "resource": true,
          "interface": ["interrupt.data"],
          "parameter": true
        }
      },
      "process": "<assign>.[irq_register] | <none>",
      "actions": {
        "irq_register": {
          "parameters": [
            "%line%",
            "%callback%",
            "%thread%",
            "%data%"
          ]
        },
        "none": {
          "condition": ["$res != 0"]
        },
        "assign": {
          "condition": ["$res == 0"],
          "statements": [
            "%line% = $arg1;",
            "%callback% = $arg2;",
            "%thread% = 0;",
            "%data% = $arg5;"
          ]
        }
      }
    },
    "request_percpu_irq": {
      "labels": {
        "thread": {
          "callback": true,
          "interface": ["interrupt.thread"]
        },
        "callback": {
          "callback": true,
          "interface": ["interrupt.handler"],
          "parameter": true
        },
        "line": {
          "resource": true,
          "interface": ["interrupt.line"],
          "parameter": true
        },
        "data": {
          "resource": true,
          "interface": ["interrupt.data"],
          "parameter": true
        }
      },
      "process": "<assign>.[irq_register] | <none>",
      "actions": {
        "irq_register": {
          "parameters": [
            "%line%",
            "%callback%",
            "%thread%",
            "%data%"
          ]
        },
        "none": {
          "condition": ["$res != 0"]
        },
        "assign": {
          "condition": ["$res == 0"],
          "statements": [
            "%line% = $arg1;",
            "%callback% = $arg2;",
            "%thread% = 0;",
            "%data% = $arg4;"
          ]
        }
      }
    },
    "free_irq, devm_free_irq": {
      "labels": {
        "line": {
          "resource": true,
          "interface": ["interrupt.line"],
          "parameter": true
        }
      },
      "process": "<assign>.[irq_deregister]",
      "actions": {
        "irq_deregister": {
          "parameters": [
            "%line%"
          ]
        },
        "assign": {
          "statements": [
            "%line% = $arg1;"
          ]
        }
      }
    },
    "free_percpu_irq": {
      "labels": {
        "line": {
          "resource": true,
          "interface": ["interrupt.line"],
          "parameter": true
        }
      },
      "process": "<assign>.[irq_deregister]",
      "actions": {
        "irq_deregister": {
          "parameters": [
            "%line%"
          ]
        },
        "assign": {
          "statements": [
            "%line% = $arg2;"
          ]
        }
      }
    },
    "misc_register": {
      "labels": {
        "file_operations": {
          "container": true,
          "interface": ["file_operations.file_operations"]
        },
        "miscdevice": {
          "container": true,
          "parameter": true,
          "interface": ["file_operations.miscdevice"]
        }
      },
      "process": "<assign>.[register] | <none>",
      "actions": {
        "register": {
          "parameters": [
            "%file_operations%"
          ]
        },
        "assign": {
          "condition": ["$res == 0"],
          "statements": [
            "%miscdevice% = $arg1;",
            "%file_operations% = %miscdevice%->fops;"
          ]
        },
        "none": {
          "condition": ["$res != 0"]
        }
      }
    },
    "misc_deregister": {
      "labels": {
        "file_operations": {
          "container": true,
          "interface": ["file_operations.file_operations"]
        },
        "miscdevice": {
          "container": true,
          "parameter": true,
          "interface": ["file_operations.miscdevice"]
        }
      },
      "process": "<assign>.[deregister]",
      "actions": {
        "deregister": {
          "parameters": [
            "%file_operations%"
          ]
        },
        "assign": {
          "condition": [],
          "statements": [
            "%miscdevice% = $arg1;",
            "%file_operations% = %miscdevice%->fops;"
          ]
        }
      }
    },
    "cdev_init": {
      "labels": {
        "file_operations": {
          "container": true,
          "parameter": true,
          "interface": ["file_operations.file_operations"]
        },
        "cdev": {
          "container": true,
          "parameter": true,
          "interface": ["file_operations.cdev"]
        }
      },
      "process": "<assign>.[register]",
      "actions": {
        "register": {
          "parameters": [
            "%file_operations%"
          ]
        },
        "assign": {
          "condition": [],
          "statements": [
            "%cdev% = $arg1;",
            "%file_operations% = $arg2;",
            "%cdev%->ops = %file_operations%;"
          ]
        }
      }
    },
    "cdev_del": {
      "labels": {
        "file_operations": {
          "container": true,
          "interface": ["file_operations.file_operations"]
        },
        "cdev": {
          "container": true,
          "parameter": true,
          "interface": ["file_operations.cdev"]
        }
      },
      "process": "<assign>.[deregister]",
      "actions": {
        "deregister": {
          "parameters": [
            "%file_operations%"
          ]
        },
        "assign": {
          "condition": [],
          "statements": [
            "%cdev% = $arg1;",
            "%file_operations% = %cdev%->ops;"
          ]
        }
      }
    },
    "ieee80211_alloc_hw": {
      "labels": {
        "ieee80211_ops": {
          "container": true,
          "parameter": true,
          "interface": ["ieee80211.ieee80211_ops"]
        },
        "ieee80211_hw": {
          "resource": true,
          "pointer": true,
          "interface": ["ieee80211.ieee80211_hw"]
        }
      },
      "process": "<alloc>.<success>.[register].<ret> | <fail>",
      "actions": {
        "alloc": {
          "statements": [
            "%ieee80211_ops% = $arg2;",
            "%ieee80211_hw% = $ALLOC(%ieee80211_hw%);"
          ]
        },
        "success": {
          "condition": ["%ieee80211_hw%"]
        },
        "fail":{
           "condition": ["!%ieee80211_hw%"],
           "statements": [
            "return 0;"
          ]
        },
        "ret": {
          "statements": [
            "return %ieee80211_hw%;"
          ]
        },
        "register": {
          "parameters": [
            "%ieee80211_hw%"
          ]
        }
      }
    },
    "ieee80211_free_hw": {
      "labels": {
        "ieee80211_hw": {
          "resource": true,
          "parameter": true,
          "interface": ["ieee80211.ieee80211_hw"]
        }
      },
      "process": "[deregister].<free>",
      "actions": {
        "free": {
          "statements": [
            "$FREE(%ieee80211_hw%);"
          ]
        },
        "deregister": {
          "parameters": [
            "%ieee80211_hw%"
          ]
        }
      }
    },
    "iio_triggered_buffer_setup": {
      "labels": {
        "thread": {
          "callback": true,
          "interface": ["iio_triggered_buffer.thread"],
          "parameter": true
        },
        "callback": {
          "callback": true,
          "interface": ["iio_triggered_buffer.handler"],
          "parameter": true
        },
        "dev": {
          "resource": true,
          "interface": ["iio_triggered_buffer.dev"],
          "parameter": true
        }
      },
      "process": "<assign>.[irq_register] | <none>",
      "actions": {
        "irq_register": {
          "parameters": [
            "%dev%",
            "%callback%",
            "%thread%"
          ]
        },
        "none": {
          "condition": ["$res != 0"]
        },
        "assign": {
          "condition": ["$res == 0"],
          "statements": [
            "%dev% = $arg1;",
            "%callback% = $arg2;",
            "%thread% = $arg3;"
          ]
        }
      }
    },
    "iio_triggered_buffer_cleanup": {
      "labels": {
        "dev": {
          "resource": true,
          "interface": ["iio_triggered_buffer.dev"],
          "parameter": true
        }
      },
      "process": "<assign>.[irq_deregister]",
      "actions": {
        "irq_deregister": {
          "parameters": [
            "%dev%"
          ]
        },
        "assign": {
          "statements": [
            "%dev% = $arg1;"
          ]
        }
      }
    },
    "rtc_device_register": {
      "labels": {
        "rtc_class_ops": {
          "container": true,
          "parameter": true,
          "interface": ["rtc.rtc_class_ops"]
        },
        "device": {
          "resource": true,
          "parameter": true,
          "interface": ["rtc.device"]
        },
        "rtc_device": {
          "container": true,
          "pointer": true,
          "interface": ["rtc.rtc_device"]
        }
      },
      "process": "<alloc>.[register].<success> | <fail>",
      "actions": {
        "alloc": {
          "statements": [
            "%rtc_device% = $ALLOC(%rtc_device%);",
            "%device% = $arg2;",
            "%rtc_class_ops% = $arg3;",
            "%rtc_device%->ops = %rtc_class_ops%;",
            "%rtc_device%->dev.parent = %device%;"
          ]
        },
        "register": {
          "parameters": [
            "%rtc_device%",
            "%rtc_class_ops%",
            "%device%"
          ]
        },
        "success": {
          "statements": [
            "return %rtc_device%;"
          ]
        },
        "fail":{
           "statements": [
            "return 0;"
          ]
        }
      }
    },
    "rtc_device_unregister": {
      "labels": {
        "rtc_device": {
          "container": true,
          "parameter": true,
          "interface": ["rtc.rtc_device"]
        }
      },
      "process": "<assign>.[deregister]",
      "actions": {
        "deregister": {
          "parameters": [
            "%rtc_device%"
          ]
        },
        "assign": {
          "statements": [
            "%rtc_device% = $arg1;"
          ]
        }
      }
    },
    "scsi_host_alloc": {
      "labels": {
        "scsi_host_template": {
          "container": true,
          "parameter": true,
          "interface": ["scsi_host_template.scsi_host_template"]
        },
        "host": {
          "container": true,
          "pointer": true,
          "interface": ["scsi_host_template.host"]
        }
      },
      "process": "<alloc>.<success> | <fail>",
      "actions": {
        "alloc": {
          "statements": [
            "%host% = $ALLOC(%host%);",
            "%scsi_host_template% = $arg1;",
            "%host%->hostt= %scsi_host_template%;"
          ]
        },
        "success": {
          "statements": [
            "return %host%;"
          ]
        },
        "fail":{
           "statements": [
            "return 0;"
          ]
        }
      }
    },
    "scsi_add_host_with_dma, scsi_add_host, scsi_register": {
      "labels": {
        "host": {
          "container": true,
          "pointer": true,
          "interface": ["scsi_host_template.host"]
        }
      },
      "process": "<alloc>.[register].<success> | <fail>",
      "actions": {
        "alloc": {
          "statements": [
            "%host% = $ALLOC(%host%);"
          ]
        },
        "register": {
          "parameters": [
            "%host%"
          ]
        },
        "success": {
          "statements": [
            "return %host%;"
          ]
        },
        "fail":{
           "statements": [
            "return 0;"
          ]
        }
      }
    },
    "scsi_remove_host, scsi_unregister": {
      "labels": {
        "host": {
          "container": true,
          "parameter": true,
          "interface": ["scsi_host_template.host"]
        }
      },
      "process": "<assign>.[deregister]",
      "actions": {
        "deregister": {
          "parameters": [
            "%host%"
          ]
        },
        "assign": {
          "statements": [
            "%host% = $arg1;"
          ]
        }
      }
    },
    "alloc_tty_driver": {
      "labels": {
        "tty_driver": {
          "resource": true,
          "interface": ["tty.tty_driver"]
        }
      },
      "process": "<alloc>.<success> | <fail>",
      "actions": {
        "alloc": {
          "statements": [
            "%tty_driver% = $ALLOC(%tty_driver%);"
          ]
        },
        "success": {
          "statements": [
            "return %tty_driver%;"
          ]
        },
        "fail":{
           "statements": [
            "return 0;"
          ]
        }
      }
    },
    "tty_port_register_device": {
      "labels": {
        "tty_port": {
          "resource": true,
          "parameter": true,
          "interface": ["tty.tty_port"]
        },
        "tty_driver": {
          "resource": true,
          "parameter": true,
          "interface": ["tty.tty_driver"]
        },
        "device": {
          "signature": "struct device *"
        }
      },
      "process": "<alloc>.[register].<success> | <fail>",
      "actions": {
        "alloc": {
          "statements": [
            "%device% = $ALLOC(%device%);",
            "%tty_port% = $arg1;",
            "%tty_driver% = $arg2;"
          ]
        },
        "register": {
          "parameters": [
            "%tty_port%",
            "%tty_driver%"
          ]
        },
        "success": {
          "statements": [
            "return %device%;"
          ]
        },
        "fail":{
           "statements": [
            "return 0;"
          ]
        }
      }
    },
    "tty_unregister_device": {
      "labels": {
        "tty_driver": {
          "resource": true,
          "parameter": true,
          "interface": ["tty.tty_driver"]
        }
      },
      "process": "<assign>.[deregister]",
      "actions": {
        "assign": {
          "statements": [
            "%tty_driver% = $arg1;"
          ]
        },
        "deregister": {
          "parameters": [
            "%tty_driver%"
          ]
        }
      }
    }
  },
  "environment processes": {
    "dummy_factory": {
      "labels": {
        "container": {
          "container": true
        }
      },
      "process": "(!register).[@instance_register].[@instance_deregister].(deregister)",
      "actions": {
        "register": {
          "parameters": [
            "%container%"
          ]
        },
        "deregister": {
          "condition": ["%container% == $ARG1"],
          "parameters": [
            "%container%"
          ]
        },
        "instance_register": {
          "parameters": [
            "%container%"
          ]
        },
        "instance_deregister": {
          "parameters": [
            "%container%"
          ]
        }
      }
    },
    "usb_instance": {
      "labels": {
        "container": {
          "container": true,
          "interface": ["usb.usb_driver"]
        },
        "resource": {
          "resource": true
        },
        "reset_flag": {
          "signature": "bool a",
          "value": "false"
        },
        "probe_retval": {
          "signature": "int a"
        },
        "callback": {
          "callback": true
        }
      },
      "process": "(!instance_register).<alloc>.[probe].(<probe_success>.((usb_reset).[pre].[post] | [suspend].[resume] | [callback] | <null>).[release] | <failed_probe>).<free>.(instance_deregister)",
      "actions": {
        "instance_register": {
          "parameters": [
            "%container%"
          ]
        },
        "instance_deregister": {
          "condition": ["%container% == $ARG1"],
          "parameters": [
            "%container%"
          ]
        },
        "alloc": {
          "statements": [
            "%resource% = $ALLOC(%resource%);"
          ]
        },
        "free": {
          "statements": [
            "$FREE(%resource%);"
          ]
        },
        "callback": {
          "callback": "%callback%",
          "parameters": [
            "%resource%"
          ]
        },
        "probe": {
          "callback": "%container.probe%",
          "parameters": [
            "%resource%"
          ],
          "callback return value": "%probe_retval%",
          "post-call": [
            "%probe_retval% = ldv_post_probe(%probe_retval%);"
          ]
        },
        "release": {
          "callback": "%container.release%",
          "parameters": [
            "%resource%"
          ]
        },
        "suspend": {
          "callback": "%container.suspend%",
          "parameters": [
            "%resource%"
          ]
        },
        "resume": {
          "callback": "%container.resume%",
          "parameters": [
            "%resource%"
          ]
        },
        "pre": {
          "callback": "%container.pre%",
          "parameters": ["%resource%"]
        },
        "post": {
          "callback": "%container.post%",
          "parameters": ["%resource%"]
        },
        "usb_reset": {},
        "probe_success": {
          "condition": ["%probe_retval% == 0"]
        },
        "failed_probe": {
          "condition": ["%probe_retval% != 0"]
        },
        "null": {}
      }
    },
    "usb_serial_instance": {
      "labels": {
        "usb_device_id": {
          "resource": true,
          "interface": ["usb_serial.usb_device_id"]
        },
        "resource": {
          "resource": true
        },
        "driver": {
          "container": true,
          "interface": ["usb_serial.usb_serial_driver"]
        },
        "callback": {
          "callback": true
        },
        "ret": {
          "signature": "int a",
          "value": "1"
        }
      },
      "process": "(!register).((deregister) | <init>.{init_workflow})",
      "actions": {
        "init_workflow": {
          "process": "[probe].(<y_ret>.[attach].(<y_ret>.{main_workflow} | <n_ret>.[release]) | <n_ret>).{init_workflow} | <free>.(deregister)"
        },
        "main_workflow": {
          "process": "([rest] | [suspend].([resume] | [reset_resume]) | [port_probe].(<y_ret>.[port_remove] | <n_ret>) | [open].(<y_ret>.{ops_workflow} | <n_ret>)).{main_workflow} | [disconnect].[release].{init_workflow}"
        },
        "ops_workflow": {
          "process": "([write] | [irq_write] | [write_room] | [ioctl]).{ops_workflow} | [close].{main_workflow}"
        },
        "register": {
          "parameters": [
            "%usb_device_id%"
          ]
        },
        "deregister": {
          "condition": ["%usb_device_id% == $ARG1"],
          "parameters": [
            "%usb_device_id%"
          ]
        },
        "init": {
          "statements": [
            "%resource% = $ALLOC(%resource%);"
          ]
        },
        "free": {
          "statements": [
            "$FREE(%resource%);"
          ]
        },
        "y_ret": {
          "condition": ["%ret% == 0"]
        },
        "n_ret": {
          "condition": ["%ret% != 0"]
        },
        "probe": {
          "callback": "%driver.probe%",
          "parameters": ["%resource%", "%usb_device_id%"],
          "callback return value": "%ret%",
          "post-call": [
            "%ret% = ldv_post_probe(%ret%);"
          ]
        },
        "attach": {
          "callback": "%driver.attach%",
          "parameters": ["%resource%"],
          "callback return value": "%ret%"
        },
        "disconnect": {
          "callback": "%driver.disconnect%",
          "parameters": ["%resource%"]
        },
        "release": {
          "callback": "%driver.release%",
          "parameters": ["%resource%"]
        },
        "suspend": {
          "callback": "%driver.suspend%",
          "parameters": ["%resource%"]
        },
        "resume": {
          "callback": "%driver.resume%",
          "parameters": ["%resource%"]
        },
        "reset_resume": {
          "callback": "%driver.reset_resume%",
          "parameters": ["%resource%"]
        },
        "port_probe": {
          "callback": "%driver.port_probe%",
          "parameters": ["%resource%"],
          "callback return value": "%ret%"
        },
        "port_remove": {
          "callback": "%driver.port_remove%",
          "parameters": ["%resource%"]
        },
        "open": {
          "callback": "%driver.open%",
          "parameters": ["%resource%"]
        },
        "close": {
          "callback": "%driver.close%",
          "parameters": ["%resource%"]
        },
        "write": {
          "callback": "%driver.write%",
          "parameters": ["%resource%"]
        },
        "irq_write": {
          "callback": "%driver.write%",
          "parameters": ["%resource%"],
          "pre-call": [
            "ldv_switch_to_interrupt_context();"
          ],
          "post-call": [
            "ldv_switch_to_process_context();"
          ]
        },
        "write_room": {
          "callback": "%driver.write_room%",
          "parameters": ["%resource%"]
        },
        "ioctl": {
          "callback": "%driver.ioctl%",
          "parameters": ["%resource%"]
        },
        "rest": {
          "callback": "%callback%",
          "parameters": [
            "%resource%"
          ]
        }
      }
    },
    "base_instance": {
      "labels": {
        "container": {
          "container": true
        },
        "resource": {
          "resource": true
        },
        "callback": {
          "callback": true
        },
        "ret": {
          "signature": "int a",
          "value": "1"
        }
      },
      "process": "(!register).<init>.{main}",
      "actions": {
        "main": {
          "process": "[probe].(<y_ret>.{call} | <n_ret>).{main} | <free>.(deregister)"
        },
        "call": {
          "process": "[callback].{call} | [suspend].(<y_ret>.[resume] | <n_ret>).{call} | [release].{main}"
        },
        "register": {
          "parameters": [
            "%container%"
          ]
        },
        "deregister": {
          "condition": ["%container% == $ARG1"],
          "parameters": [
            "%container%"
          ]
        },
        "callback": {
          "callback": "%callback%",
          "parameters": [
            "%resource%"
          ]
        },
        "release": {
          "callback": "%container.release%",
          "parameters": [
            "%resource%"
          ]
        },
        "probe": {
          "callback": "%container.probe%",
          "parameters": [
            "%resource%"
          ],
          "callback return value": "%ret%",
          "post-call": [
            "%ret% = ldv_post_probe(%ret%);"
          ]
        },
        "suspend": {
          "callback": "%container.suspend%",
          "parameters": [
            "%resource%"
          ],
          "callback return value": "%ret%"
        },
        "resume": {
          "callback": "%container.resume%",
          "parameters": [
            "%resource%"
          ]
        },
        "init": {
          "statements": [
            "%resource% = $ALLOC(%resource%);"
          ]
        },
        "free": {
          "statements": [
            "$FREE(%resource%);"
          ]
        },
        "y_ret": {
          "condition": ["%ret% == 0"]
        },
        "n_ret": {
          "condition": ["%ret% != 0"]
        }
      }
    },
    "pci_instance": {
      "labels": {
        "container": {
          "container": true
        },
        "resource": {
          "resource": true
        },
        "callback": {
          "callback": true
        },
        "ret": {
          "signature": "int a",
          "value": "1"
        }
      },
      "process": "(!register).<init>.{main}",
      "actions": {
        "main": {
          "process": "[probe].(<y_ret>.{call} | <n_ret>).{main} | <free>.(deregister)"
        },
        "call": {
          "process": "[callback].{call} | [suspend].[suspend_late].[resume_early].[resume].{call} | [shutdown].[release].{main}"
        },
        "register": {
          "parameters": [
            "%container%"
          ]
        },
        "deregister": {
          "condition": ["%container% == $ARG1"],
          "parameters": [
            "%container%"
          ]
        },
        "callback": {
          "callback": "%callback%",
          "parameters": [
            "%resource%"
          ]
        },
        "release": {
          "callback": "%container.release%",
          "parameters": [
            "%resource%"
          ]
        },
        "probe": {
          "callback": "%container.probe%",
          "parameters": [
            "%resource%"
          ],
          "callback return value": "%ret%",
          "post-call": [
            "%ret% = ldv_post_probe(%ret%);"
          ]
        },
        "suspend": {
          "callback": "%container.suspend%",
          "parameters": [
            "%resource%"
          ],
          "callback return value": "%ret%"
        },
        "suspend_late": {
          "callback": "%container.suspend_late%",
          "parameters": [
            "%resource%"
          ],
          "callback return value": "%ret%"
        },
        "resume_early": {
          "callback": "%container.resume_early%",
          "parameters": [
            "%resource%"
          ]
        },
        "resume": {
          "callback": "%container.resume%",
          "parameters": [
            "%resource%"
          ]
        },
        "shutdown": {
          "callback": "%container.shutdown%",
          "parameters": [
            "%resource%"
          ]
        },
        "init": {
          "statements": [
            "%resource% = $ALLOC(%resource%);"
          ]
        },
        "free": {
          "statements": [
            "$FREE(%resource%);"
          ]
        },
        "y_ret": {
          "condition": ["%ret% == 0"]
        },
        "n_ret": {
          "condition": ["%ret% != 0"]
        }
      }
    },
    "platform_instance": {
      "labels": {
        "container": {
          "container": true,
          "interface": ["platform.platform_driver"]
        },
        "resource": {
          "resource": true
        },
        "callback": {
          "callback": true
        },
        "probed": {
          "signature": "int a",
          "value": "1"
        }
      },
      "process": "(!register).<init>.{main}",
      "actions": {
        "main": {
          "process": "[probe].(<positive_probe>.{call} | <negative_probe>.{main}) | <free>.(deregister)"
        },
        "call": {
          "process": "([callback] | [pm_register].[pm_deregister]).{call} | [release].<after_release>.{main}"
        },
        "register": {
          "parameters": [
            "%container%"
          ]
        },
        "deregister": {
          "condition": ["%container% == $ARG1"],
          "parameters": [
            "%container%"
          ]
        },
        "callback": {
          "callback": "%callback%",
          "parameters": [
            "%resource%"
          ]
        },
        "release": {
          "callback": "%container.release%",
          "parameters": [
            "%resource%"
          ]
        },
        "probe": {
          "callback": "%container.probe%",
          "parameters": [
            "%resource%"
          ],
          "callback return value": "%probed%",
          "post-call": [
            "%probed% = ldv_post_probe(%probed%);"
          ]
        },
        "init": {
          "statements": [
            "%resource% = $ALLOC(%resource%);"
          ]
        },
        "free": {
          "statements": [
            "$FREE(%resource%);"
          ]
        },
        "after_release": {
          "statements": [
            "%probed% = 1;"
          ]
        },
        "positive_probe": {
          "condition": ["%probed% == 0"]
        },
        "negative_probe": {
          "condition": ["%probed% != 0"]
        },
        "pm_register": {
          "parameters": []
        },
        "pm_deregister": {
          "parameters": []
        }
      }
    },
    "pm_ops_instance": {
      "labels": {
        "pm_ops": {
          "container": true,
          "interface": ["pm.dev_pm_ops"]
        },
        "device": {
          "resource": true,
          "interface": ["pm.device"]
        }
      },
      "process": "(!pm_register).{do}",
      "actions": {
        "do": {
          "process": "[runtime_idle].{do} | [runtime_suspend].[runtime_resume].{do} | [prepare].([suspend].([suspend_noirq].[resume_noirq] | [suspend_late].[resume_early]).[resume] | [freeze].([freeze_late].[thaw_early] | [freeze_noirq].[thaw_noirq]).[thaw] | [poweroff].([poweroff_late].[restore_early] | [poweroff_noirq].[restore_noirq]).[restore]).[complete].{do} | (pm_deregister)"
        },
        "pm_register": {
          "parameters": []
        },
        "pm_deregister": {
          "parameters": []
        },
        "prepare": {
            "callback": "%pm_ops.prepare%",
            "parameters": ["%device%"]
        },
        "complete": {
            "callback": "%pm_ops.complete%",
            "parameters": ["%device%"]
        },
        "suspend": {
            "callback": "%pm_ops.suspend%",
            "parameters": ["%device%"]
        },
        "resume": {
            "callback": "%pm_ops.resume%",
            "parameters": ["%device%"]
        },
        "freeze": {
            "callback": "%pm_ops.freeze%",
            "parameters": ["%device%"]
        },
        "thaw": {
            "callback": "%pm_ops.thaw%",
            "parameters": ["%device%"]
        },
        "poweroff": {
            "callback": "%pm_ops.poweroff%",
            "parameters": ["%device%"]
        },
        "restore": {
            "callback": "%pm_ops.restore%",
            "parameters": ["%device%"]
        },
        "suspend_late": {
            "callback": "%pm_ops.suspend_late%",
            "parameters": ["%device%"]
        },
        "resume_early": {
            "callback": "%pm_ops.resume_early%",
            "parameters": ["%device%"]
        },
        "freeze_late": {
            "callback": "%pm_ops.freeze_late%",
            "parameters": ["%device%"]
        },
        "thaw_early": {
            "callback": "%pm_ops.thaw_early%",
            "parameters": ["%device%"]
        },
        "poweroff_late": {
            "callback": "%pm_ops.poweroff_late%",
            "parameters": ["%device%"]
        },
        "restore_early": {
            "callback": "%pm_ops.restore_early%",
            "parameters": ["%device%"]
        },
        "suspend_noirq": {
            "callback": "%pm_ops.suspend_noirq%",
            "parameters": ["%device%"]
        },
        "resume_noirq": {
            "callback": "%pm_ops.resume_noirq%",
            "parameters": ["%device%"]
        },
        "freeze_noirq": {
            "callback": "%pm_ops.freeze_noirq%",
            "parameters": ["%device%"]
        },
        "thaw_noirq": {
            "callback": "%pm_ops.thaw_noirq%",
            "parameters": ["%device%"]
        },
        "poweroff_noirq": {
            "callback": "%pm_ops.poweroff_noirq%",
            "parameters": ["%device%"]
        },
        "restore_noirq": {
            "callback": "%pm_ops.restore_noirq%",
            "parameters": ["%device%"]
        },
        "runtime_suspend": {
            "callback": "%pm_ops.runtime_suspend%",
            "parameters": ["%device%"]
        },
        "runtime_resume": {
            "callback": "%pm_ops.runtime_resume%",
            "parameters": ["%device%"]
        },
        "runtime_idle": {
            "callback": "%pm_ops.runtime_idle%",
            "parameters": ["%device%"]
        }
      }
    },
    "transport_instance": {
      "labels": {
        "se_subsystem_api": {
          "container": true,
          "interface": ["se_subsystem.se_subsystem_api"]
        },
        "se_hba": {
          "resource": true,
          "interface": ["se_subsystem.se_hba"]
        },
        "se_device": {
          "interface": ["se_subsystem.se_device"]
        },
        "callback": {
          "resource": true,
          "callback": true
        },
        "allocated": {
          "signature": "int a",
          "value": "0"
        }
      },
      "process": "(!register).<init>.[alloc].<post_alloc>.{call}",
      "actions": {
        "call": {
          "process": "<positive_alloc>.([callback].{call} | [attach_hba].[detach_hba].{call} | [se_free].<after_free>.{call}) | <negative_alloc>.(<free>.(deregister) | [alloc].<post_alloc>.{call})"
        },
        "register": {
          "parameters": [
            "%se_subsystem_api%"
          ]
        },
        "deregister": {
          "condition": ["%se_subsystem_api% == $ARG1"],
          "parameters": [
            "%se_subsystem_api%"
          ]
        },
        "callback": {
          "callback": "%callback%",
          "parameters": ["%se_hba%", "%se_device%"]
        },
        "se_free": {
          "callback": "%se_subsystem_api.free%",
          "parameters": [
            "%se_device%"
          ]
        },
        "alloc": {
          "callback": "%se_subsystem_api.alloc%",
          "parameters": [
            "%se_hba%"
          ],
          "callback return value": "%se_device%"
        },
        "attach_hba": {
          "callback": "%se_subsystem_api.attach_hba%",
          "parameters": [
            "%se_hba%"
          ]
        },
        "detach_hba": {
          "callback": "%se_subsystem_api.detach_hba%",
          "parameters": [
            "%se_hba%"
          ]
        },
        "init": {
          "statements": [
            "%se_hba% = $ALLOC(%se_hba%);"
          ]
        },
        "free": {
          "statements": [
            "$FREE(%se_hba%);"
          ]
        },
        "after_free": {
          "statements": [
            "%allocated% = 0;"
          ]
        },
        "post_alloc": {
          "statements": [
            "if (%se_device%)",
            " %allocated% = 1;"
          ]
        },
        "positive_alloc": {
          "condition": ["%allocated% == 1"]
        },
        "negative_alloc": {
          "condition": ["%allocated% != 1"]
        }
      }
    },
    "io_instance": {
      "labels": {
        "container": {
          "container": true
        },
        "resource": {
          "resource": true
        },
        "callback": {
          "callback": true
        },
        "ret": {
          "signature": "int a",
          "value": "1"
        }
      },
      "process": "(!register).<init>.{main}",
      "actions": {
        "main": {
          "process": "[probe].(<y_ret>.{call} | <n_ret>.{main}) | <free>.(deregister)"
        },
        "call": {
          "process": "[callback].{call} | [release].{main}"
        },
        "register": {
          "parameters": [
            "%container%"
          ]
        },
        "deregister": {
          "condition": ["%container% == $ARG1"],
          "parameters": [
            "%container%"
          ]
        },
        "callback": {
          "callback": "%callback%",
          "parameters": [
            "%resource%"
          ]
        },
        "release": {
          "callback": "%container.release%",
          "parameters": [
            "%resource%"
          ]
        },
        "probe": {
          "callback": "%container.probe%",
          "parameters": [
            "%resource%"
          ],
          "callback return value": "%ret%",
          "post-call": [
            "%ret% = ldv_post_probe(%ret%);"
          ]
        },
        "init": {
          "statements": [
            "%resource% = $ALLOC(%resource%);"
          ]
        },
        "free": {
          "statements": [
            "$FREE(%resource%);"
          ]
        },
        "y_ret": {
          "condition": ["%ret% == 0"]
        },
        "n_ret": {
          "condition": ["%ret% != 0"]
        }
      }
    },
    "file_operations_instance": {
      "headers": ["linux/fs.h", "linux/pagemap.h"],
      "labels": {
        "container": {
          "container": true,
          "interface": ["file_operations.file_operations"]
        },
        "resource": {
          "resource": true
        },
        "callback": {
          "callback": true
        },
        "ret": {
          "signature": "int a",
          "value": "1"
        },
        "size_cnt": {
          "resource": true,
          "interface": ["file_operations.write_size"]
        }
      },
      "process": "(!register).<init>.{main}",
      "actions": {
        "main": {
          "process": "[probe].(<y_ret>.{call} | <n_ret>.{main}) | <free>.(deregister)"
        },
        "call": {
          "process": "([callback] | [write]).{call} | [release].{main}"
        },
        "register": {
          "parameters": [
            "%container%"
          ]
        },
        "deregister": {
          "condition": ["%container% == $ARG1"],
          "parameters": [
            "%container%"
          ]
        },
        "callback": {
          "callback": "%callback%",
          "parameters": [
            "%resource%","%size_cnt%"
          ]
        },
        "release": {
          "callback": "%container.release%",
          "parameters": [
            "%resource%"
          ]
        },
        "probe": {
          "callback": "%container.probe%",
          "parameters": [
            "%resource%"
          ],
          "callback return value": "%ret%",
          "post-call": [
            "%ret% = ldv_post_probe(%ret%);"
          ]
        },
        "write": {
          "callback": "%container.write%",
          "parameters": [
            "%resource%","%size_cnt%"
          ],
          "pre-call": [
            "ldv_assume(%size_cnt% <= MAX_RW_COUNT);"
          ]
        },
        "init": {
          "statements": [
            "%resource% = $ALLOC(%resource%);",
            "%size_cnt% = ldv_undef_int();"
          ]
        },
        "free": {
          "statements": [
            "$FREE(%resource%);"
          ]
        },
        "y_ret": {
          "condition": ["%ret% == 0"]
        },
        "n_ret": {
          "condition": ["%ret% != 0"]
        }
      }
    },
    "ieee80211_instance": {
      "headers": ["linux/rtnetlink.h"],
      "labels": {
        "container": {
          "container": true,
          "interface": ["ieee80211.ieee80211_ops"]
        },
        "callback": {
          "callback": true
        },
        "resource": {
          "resource": true,
          "interface": ["ieee80211.ieee80211_hw"]
        },
        "ret": {
          "signature": "int a"
        }
      },
      "process": "(!register).{main}",
      "actions": {
        "main": {
          "process": "[start].(<y_ret>.{started} | <n_ret>).{main} | (deregister)"
        },
        "started": {
          "process": "[suspend].[resume].{started} | [callback].{started} | [stop].{main}"
        },
        "register": {
          "parameters": [
            "%resource%"
          ]
        },
        "deregister": {
          "condition": ["%resource% == $ARG1"],
          "parameters": [
            "%resource%"
          ]
        },
        "y_ret": {
          "condition": ["%ret% == 0"]
        },
        "n_ret": {
          "condition": ["%ret% != 0"]
        },
        "callback": {
          "callback": "%callback%",
          "parameters": [
            "%resource%"
          ]
        },
        "start": {
          "callback": "%container.start%",
          "parameters": ["%resource%"],
          "pre-call": [
            "rtnl_lock();"
          ],
          "post-call": [
            "%ret% = ldv_post_probe(%ret%);",
            "rtnl_unlock();"
          ],
          "callback return value": "%ret%"
        },
        "stop": {
          "callback": "%container.stop%",
          "parameters": ["%resource%"],
          "pre-call": [
            "rtnl_lock();"
          ],
          "post-call": [
            "rtnl_unlock();"
          ]

        },
        "suspend": {
          "callback": "%container.suspend%",
          "parameters": ["%resource%"]
        },
        "resume": {
          "callback": "%container.resume%",
          "parameters": ["%resource%"]
        }
      }
    },
    "dummy_resourceless_instance": {
      "labels": {
        "container": {
          "container": true,
          "resource": true
        },
        "callback": {
          "callback": true
        }
      },
      "process": "(!register).{call}",
      "actions": {
        "call": {
          "process": "[callback].{call} | (deregister)"
        },
        "register": {
          "parameters": [
            "%container%"
          ]
        },
        "deregister": {
          "condition": ["%container% == $ARG1"],
          "parameters": [
            "%container%"
          ]
        },
        "callback": {
          "callback": "%callback%",
          "parameters": [
            "%container%"
          ]
        }
      }
    },
    "scsi_host_template_instance": {
      "labels": {
        "host": {
          "container": true,
          "interface": ["scsi_host_template.host"]
        },
        "callback": {
          "callback": true
        },
        "ret": {
          "signature": "int a",
          "value": "1"
        }
      },
      "process": "(!register).{main}",
      "actions": {
        "main": {
          "process": "[probe].(<y_ret>.{call} | <n_ret>.{main}) | (deregister)"
        },
        "call": {
          "process": "[callback].{call} | [release].{main}"
        },
        "register": {
          "parameters": [
            "%host%"
          ]
        },
        "deregister": {
          "condition": ["%host% == $ARG1"],
          "parameters": [
            "%host%"
          ]
        },
        "callback": {
          "callback": "%callback%",
          "parameters": [
            "%host%"
          ]
        },
        "release": {
          "callback": "%host.scsi_host_template.release%",
          "parameters": [
            "%host%"
          ]
        },
        "probe": {
          "callback": "%host.scsi_host_template.probe%",
          "parameters": [
            "%host%"
          ],
          "callback return value": "%ret%",
          "post-call": [
            "%ret% = ldv_post_probe(%ret%);"
          ]
        },
        "y_ret": {
          "condition": ["%ret% == 0"]
        },
        "n_ret": {
          "condition": ["%ret% != 0"]
        }
      }
    },
    "dummy_instance": {
      "labels": {
        "container": {
          "container": true
        },
        "resource": {
          "resource": true
        },
        "callback": {
          "callback": true
        }
      },
      "process": "(!register).<init>.{call}",
      "actions": {
        "call": {
          "process": "[callback].{call} | <free>.(deregister)"
        },
        "register": {
          "parameters": [
            "%container%"
          ]
        },
        "deregister": {
          "condition": ["%container% == $ARG1"],
          "parameters": [
            "%container%"
          ]
        },
        "callback": {
          "callback": "%callback%",
          "parameters": [
            "%resource%"
          ]
        },
        "init": {
          "statements": [
            "%resource% = $ALLOC(%resource%);"
          ]
        },
        "free": {
          "statements": [
            "$FREE(%resource%);"
          ]
        }
      }
    },
    "seq_instance": {
      "labels": {
        "ops": {
          "container": true,
          "interface": ["seq_operations.seq_operations"]
        },
        "seq_file": {
          "resource": true,
          "interface": ["seq_operations.seq_file"]
        },
        "started": {
          "signature": "int a",
          "value": "0"
        }
      },
      "process": "(!register).{do}",
      "actions": {
        "do": {
          "process": "<started>.([stop].<post_stop> | [show] | [next]).{do} | <not_started>.([start].<post_start>.{do} | (deregister))"
        },
        "deregister": {
          "condition": ["%seq_file% == $ARG1"],
          "parameters": ["%seq_file%"]
        },
        "register": {
          "parameters": ["%seq_file%", "%ops%"]
        },
        "post_start": {
          "statements": [
            "%started% = 1;"
          ]
        },
        "post_stop": {
          "statements": [
            "%started% = 0;"
          ]
        },
        "started": {
          "condition": [
            "%started% == 1"
          ]
        },
        "not_started": {
          "condition": [
            "%started% == 0"
          ]
        },
        "start": {
          "callback": "%ops.start%",
          "parameters": ["%seq_file%"]
        },
        "stop": {
          "callback": "%ops.stop%",
          "parameters": ["%seq_file%"]
        },
        "show": {
          "callback": "%ops.show%",
          "parameters": ["%seq_file%"]
        },
        "next": {
          "callback": "%ops.next%",
          "parameters": ["%seq_file%"]
        }
      }
    },
    "timer_instance": {
      "labels": {
        "container": {
          "container": true,
          "interface": ["timer.timer_list"]
        }
      },
      "process": "(!instance_register).[callback].(instance_deregister)",
      "actions": {
        "instance_register": {
          "parameters": [
            "%container%"
          ]
        },
        "instance_deregister": {
          "condition": ["%container% == $ARG1"],
          "parameters": [
            "%container%"
          ]
        },
        "callback": {
          "callback": "%container.handler%",
          "parameters": [
            "%container.data%"
          ]
        }
      }
    },
    "interrupt_instance": {
      "labels": {
        "thread": {
          "callback": true,
          "interface": ["interrupt.thread"]
        },
        "callback": {
          "callback": true,
          "interface": ["interrupt.handler"]
        },
        "line": {
          "resource": true,
          "interface": ["interrupt.line"]
        },
        "data": {
          "resource": true,
          "interface": ["interrupt.data"]
        },
        "ret_val": {
          "signature": "irqreturn_t a"
        }
      },
      "process": "(!irq_register).[handler].(<need_thread>.[thread] | <handled>).(irq_deregister)",
      "actions": {
        "irq_register": {
           "parameters": [
             "%line%",
             "%callback%",
             "%thread%",
             "%data%"
           ]
        },
        "irq_deregister": {
          "condition": ["%line% == $ARG1"],
          "parameters": [
            "%line%"
          ]
        },
        "handler": {
          "callback": "%callback%",
          "parameters": [
            "%line%",
            "%data%"
          ],
          "callback return value": "%ret_val%"
        },
        "thread": {
          "callback": "%thread%",
          "parameters": [
            "%line%",
            "%data%"
          ]
        },
        "need_thread": {
          "condition": ["%ret_val% == IRQ_WAKE_THREAD"]
        },
        "handled": {
          "condition": ["%ret_val% != IRQ_WAKE_THREAD"]
        }
      }
    },
    "iio_triggered_buffer_instance": {
      "labels": {
        "thread": {
          "callback": true,
          "interface": ["iio_triggered_buffer.thread"]
        },
        "callback": {
          "callback": true,
          "interface": ["iio_triggered_buffer.handler"]
        },
        "line": {
          "resource": true,
          "interface": ["iio_triggered_buffer.line"]
        },
        "data": {
          "resource": true,
          "interface": ["iio_triggered_buffer.data"]
        },
        "dev": {
          "resource": true,
          "interface": ["iio_triggered_buffer.dev"]
        },
        "ret_val": {
          "signature": "irqreturn_t a"
        }
      },
      "process": "(!irq_register).[handler].(<need_thread>.[thread] | <handled>).(irq_deregister)",
      "actions": {
        "irq_register": {
           "parameters": [
             "%dev%",
             "%callback%",
             "%thread%"
           ]
        },
        "irq_deregister": {
          "condition": ["%line% == $ARG1"],
          "parameters": [
            "%dev%"
          ]
        },
        "handler": {
          "callback": "%callback%",
          "parameters": [
            "%line%",
            "%data%"
          ],
          "callback return value": "%ret_val%"
        },
        "thread": {
          "callback": "%thread%",
          "parameters": [
            "%line%",
            "%data%"
          ]
        },
        "need_thread": {
          "condition": ["%ret_val% == IRQ_WAKE_THREAD"]
        },
        "handled": {
          "condition": ["%ret_val% != IRQ_WAKE_THREAD"]
        }
      }
    },
    "rtc_class_instance": {
      "labels": {
        "rtc_class_ops": {
          "container": true,
          "interface": ["rtc.rtc_class_ops"]
        },
        "device": {
          "resource": true,
          "interface": ["rtc.device"]
        },
        "rtc_device": {
          "container": true,
          "interface": ["rtc.rtc_device"]
        },
        "callback": {
          "callback": true
        },
        "ret": {
          "signature": "int a",
          "value": "1"
        }
      },
      "process": "(!register).{main}",
      "actions": {
        "main": {
          "process": "[probe].(<y_ret>.{call} | <n_ret>.{main}) | (deregister)"
        },
        "call": {
          "process": "[callback].{call} | [release].{main}"
        },
        "register": {
          "parameters": [
            "%rtc_device%",
            "%rtc_class_ops%",
            "%device%"
          ]
        },
        "deregister": {
          "condition": ["%rtc_device% == $ARG1"],
          "parameters": [
            "%rtc_device%"
          ]
        },
        "callback": {
          "callback": "%callback%",
          "parameters": [
            "%device%"
          ]
        },
        "release": {
          "callback": "%rtc_class_ops.release%",
          "parameters": [
            "%device%"
          ]
        },
        "probe": {
          "callback": "%rtc_class_ops.probe%",
          "parameters": [
            "%device%"
          ],
          "callback return value": "%ret%",
          "post-call": [
            "%ret% = ldv_post_probe(%ret%);"
          ]
        },
        "y_ret": {
          "condition": ["%ret% == 0"]
        },
        "n_ret": {
          "condition": ["%ret% != 0"]
        }
      }
    },
    "tty_instance": {
      "labels": {
        "tty_port_operations": {
          "container": true,
          "interface": ["tty.tty_port_operations"]
        },
        "tty_operations": {
          "container": true,
          "interface": ["tty.tty_operations"]
        },
        "tty_port": {
          "resource": true,
          "interface": ["tty.tty_port"]
        },
        "tty_driver": {
          "resource": true,
          "interface": ["tty.tty_driver"]
        },
        "tty_struct": {
          "resource": true,
          "interface": ["tty.tty_struct"]
        },
        "file": {
          "resource": true,
          "interface": ["tty.file"]
        },
        "callback": {
          "callback": true
        },
        "ret": {
          "signature": "int a",
          "value": "1"
        }
      },
      "process": "(!register).<init>.[lookup].{main}",
      "actions": {
        "main": {
          "process": "[install].(<y_ret>.[open].(<y_ret>.{call} | <n_ret>.[remove]) | <n_ret>).{main} | <free>.(deregister)"
        },
        "call": {
          "process": "([lookup] | [callback] | [set_termios] | [throttle].[unthrottle] | [start].[stop] | [set_termiox] | [port_activate].(<y_ret>.[port_shutdown] | <n_ret>)).{call} | [close].[shutdown].[cleanup].[remove].{main}"
        },
        "register": {
          "parameters": [
            "%tty_port%",
            "%tty_driver%"
          ]
        },
        "deregister": {
          "condition": ["%tty_driver% == $ARG1"],
          "parameters": [
            "%tty_driver%"
          ]
        },
        "callback": {
          "callback": "%callback%",
          "parameters": [
            "%tty_struct%"
          ]
        },
        "y_ret": {
          "condition": ["%ret% == 0"]
        },
        "n_ret": {
          "condition": ["%ret% != 0"]
        },
        "init": {
          "statements": [
            "%file% = $ALLOC(%file%);"
          ]
        },
        "free": {
          "statements": [
            "$FREE(%file%);"
          ]
        },
        "lookup": {
          "callback": "%tty_operations.lookup%",
          "parameters": [
            "%tty_driver%"
          ],
          "callback return value": "%tty_struct%",
          "pre-call": [
            "/* Expect that tty_mutex is locked */"
          ]
        },
        "install": {
          "callback": "%tty_operations.install%",
          "parameters": [
            "%tty_driver%",
            "%tty_struct%"
          ],
          "callback return value": "%ret%",
          "post-call": [
            "%ret% = ldv_post_probe(%ret%);"
          ]
        },
        "remove": {
          "callback": "%tty_operations.remove%",
          "parameters": [
            "%tty_driver%",
            "%tty_struct%"
          ]
        },
        "open": {
          "callback": "%tty_operations.open%",
          "parameters": [
            "%tty_struct%",
            "%file%"
          ],
          "callback return value": "%ret%",
          "post-call": [
            "%ret% = ldv_post_probe(%ret%);"
          ]
        },
        "close": {
          "callback": "%tty_operations.close%",
          "parameters": [
            "%tty_driver%",
            "%tty_struct%"
          ]
        },
        "shutdown": {
          "callback": "%tty_operations.shutdown%",
          "parameters": [
            "%tty_struct%"
          ],
          "pre-call": [
            "/* Expect that tty_mutex is locked */"
          ]
        },
        "cleanup": {
          "callback": "%tty_operations.cleanup%",
          "parameters": [
            "%tty_struct%"
          ]
        },
        "port_activate": {
          "callback": "%tty_port_operations.port_activate%",
          "parameters": [
            "%tty_port%",
            "%tty_struct%"
          ],
          "callback return value": "%ret%",
          "post-call": [
            "%ret% = ldv_post_probe(%ret%);"
          ]
        },
        "port_shutdown": {
          "callback": "%tty_port_operations.port_shutdown%",
          "parameters": [
            "%tty_port%"
          ]
        },
        "set_termios": {
          "callback": "%tty_operations.set_termios%",
          "parameters": [
            "%tty_struct%"
          ],
          "pre-call": [
            "/* Expect that termios mutex is locked */"
          ]
        },
        "set_termiox": {
          "callback": "%tty_operations.set_termiox%",
          "parameters": [
            "%tty_struct%"
          ],
          "pre-call": [
            "/* Expect that termios mutex is locked */"
          ]
        },
        "throttle": {
          "callback": "%tty_operations.throttle%",
          "parameters": [
            "%tty_struct%"
          ],
          "pre-call": [
            "/* Expect that termios mutex is locked */"
          ]
        },
        "unthrottle": {
          "callback": "%tty_operations.unthrottle%",
          "parameters": [
            "%tty_struct%"
          ],
          "pre-call": [
            "/* Expect that termios mutex is locked */"
          ]
        },
        "start": {
          "callback": "%tty_operations.start%",
          "parameters": [
            "%tty_struct%"
          ]
        },
        "stop": {
          "callback": "%tty_operations.stop%",
          "parameters": [
            "%tty_struct%"
          ]
        }
      }
    },
	"relaease_remove_instance": {
      "labels": {
        "container": {
          "container": true
        },
        "resource": {
          "resource": true
        },
        "callback": {
          "callback": true
        },
        "ret": {
          "signature": "int a",
          "value": "1"
        }
      },
      "process": "(!register).<init>.{main}",
      "actions": {
        "main": {
          "process": "[probe].(<y_ret>.{call} | <n_ret>.{main}) | <free>.[remove].(deregister)"
        },
        "call": {
          "process": "[callback].{call} | [release].{main}"
        },
        "register": {
          "parameters": [
            "%container%"
          ]
        },
        "deregister": {
          "condition": ["%container% == $ARG1"],
          "parameters": [
            "%container%"
          ]
        },
        "callback": {
          "callback": "%callback%",
          "parameters": [
            "%resource%"
          ]
        },
        "release": {
          "callback": "%container.release%",
          "parameters": [
            "%resource%"
          ]
        },
        "remove": {
          "callback": "%container.remove%",
          "parameters": [
            "%resource%"
          ]
        },
        "probe": {
          "callback": "%container.probe%",
          "parameters": [
            "%resource%"
          ],
          "callback return value": "%ret%",
          "post-call": [
            "%ret% = ldv_post_probe(%ret%);"
          ]
        },
        "init": {
          "statements": [
            "%resource% = $ALLOC(%resource%);"
          ]
        },
        "free": {
          "statements": [
            "$FREE(%resource%);"
          ]
        },
        "y_ret": {
          "condition": ["%ret% == 0"]
        },
        "n_ret": {
          "condition": ["%ret% != 0"]
        }
      }
    }
  }
}
