{
  "Linux 3.14 (base)": {
    "kernel model": {},
    "environment processes": {
      "dummy_factory": {
        "labels": {
          "container": {
            "container": true
          }
        },
        "process": "(!register).[@instance_register].[@instance_deregister].(deregister)",
        "actions": {
          "register": {
            "comment": "Proceed to {0!r} callbacks invocations scenarios.",
            "parameters": [
              "%container%"
            ]
          },
          "deregister": {
            "comment": "Finish {0!r} callbacks invocations scenarios.",
            "condition": [
              "%container% == $ARG1"
            ],
            "parameters": [
              "%container%"
            ]
          },
          "instance_register": {
            "comment": "Initiate scenario for {0!r} callbacks invocations",
            "parameters": [
              "%container%"
            ]
          },
          "instance_deregister": {
            "comment": "Finish scenario for {0!r} callbacks invocations",
            "parameters": [
              "%container%"
            ]
          }
        }
      },
      "base_instance": {
        "labels": {
          "container": {
            "container": true
          },
          "resource": {
            "resource": true
          },
          "callback": {
            "callback": true
          },
          "ret": {
            "signature": "int a",
            "value": "1"
          }
        },
        "process": "(!register).<init>.{main}",
        "actions": {
          "main": {
            "process": "[probe].(<y_ret>.{call} | <n_ret>).{main} | <free>.(deregister)"
          },
          "call": {
            "process": "[callback].{call} | [suspend].(<y_ret>.[resume] | <n_ret>).{call} | [release].{main}"
          },
          "register": {
            "parameters": [
              "%container%"
            ]
          },
          "deregister": {
            "condition": [
              "%container% == $ARG1"
            ],
            "parameters": [
              "%container%"
            ]
          },
          "callback": {
            "callback": "%callback%",
            "parameters": [
              "%resource%"
            ]
          },
          "release": {
            "callback": "%container.release%",
            "parameters": [
              "%resource%"
            ]
          },
          "probe": {
            "callback": "%container.probe%",
            "parameters": [
              "%resource%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_filter_err_code(%ret%);"
            ]
          },
          "suspend": {
            "callback": "%container.suspend%",
            "parameters": [
              "%resource%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_filter_err_code(%ret%);"
            ]
          },
          "resume": {
            "callback": "%container.resume%",
            "parameters": [
              "%resource%"
            ]
          },
          "init": {
            "statements": [
              "%resource% = $ALLOC(%resource%);"
            ]
          },
          "free": {
            "statements": [
              "$FREE(%resource%);"
            ]
          },
          "y_ret": {
            "condition": [
              "%ret% == 0"
            ]
          },
          "n_ret": {
            "condition": [
              "%ret% != 0"
            ]
          }
        }
      },
      "dummy_resourceless_instance": {
        "comment": "Scenario with random invocation of callbacks.",
        "labels": {
          "container": {
            "container": true,
            "resource": true
          },
          "callback": {
            "callback": true
          }
        },
        "process": "(!register).{call}",
        "actions": {
          "call": {
            "comment": "Choose a callback randomly.",
            "process": "[callback].{call} | (deregister)"
          },
          "register": {
            "parameters": [
              "%container%"
            ]
          },
          "deregister": {
            "condition": [
              "%container% == $ARG1"
            ],
            "parameters": [
              "%container%"
            ]
          },
          "callback": {
            "callback": "%callback%",
            "parameters": [
              "%container%"
            ]
          }
        }
      },
      "dummy_instance": {
        "comment": "Scenario with random invocation of callbacks.",
        "labels": {
          "container": {
            "container": true
          },
          "resource": {
            "resource": true
          },
          "callback": {
            "callback": true
          }
        },
        "process": "(!register).<init>.{call}",
        "actions": {
          "call": {
            "process": "[callback].{call} | <free>.(deregister)"
          },
          "register": {
            "parameters": [
              "%container%"
            ]
          },
          "deregister": {
            "condition": [
              "%container% == $ARG1"
            ],
            "parameters": [
              "%container%"
            ]
          },
          "callback": {
            "callback": "%callback%",
            "parameters": [
              "%resource%"
            ]
          },
          "init": {
            "statements": [
              "%resource% = $ALLOC(%resource%);"
            ]
          },
          "free": {
            "statements": [
              "$FREE(%resource%);"
            ]
          }
        }
      },
      "pci_instance": {
        "labels": {
          "container": {
            "container": true
          },
          "resource": {
            "resource": true
          },
          "callback": {
            "callback": true
          },
          "ret": {
            "signature": "int a",
            "value": "1"
          }
        },
        "process": "(!register).<init>.{main}",
        "actions": {
          "main": {
            "process": "[probe].(<y_ret>.{call} | <n_ret>).{main} | <free>.(deregister)"
          },
          "call": {
            "process": "[callback].{call} | [suspend].[suspend_late].[resume_early].[resume].{call} | [shutdown].[release].{main}"
          },
          "register": {
            "parameters": [
              "%container%"
            ]
          },
          "deregister": {
            "condition": [
              "%container% == $ARG1"
            ],
            "parameters": [
              "%container%"
            ]
          },
          "callback": {
            "callback": "%callback%",
            "parameters": [
              "%resource%"
            ]
          },
          "release": {
            "callback": "%container.release%",
            "parameters": [
              "%resource%"
            ]
          },
          "probe": {
            "callback": "%container.probe%",
            "parameters": [
              "%resource%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ],
            "pre-call": [
              "ldv_pre_probe();"
            ]
          },
          "suspend": {
            "callback": "%container.suspend%",
            "parameters": [
              "%resource%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_filter_err_code(%ret%);"
            ]
          },
          "suspend_late": {
            "callback": "%container.suspend_late%",
            "parameters": [
              "%resource%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_filter_err_code(%ret%);"
            ]
          },
          "resume_early": {
            "callback": "%container.resume_early%",
            "parameters": [
              "%resource%"
            ]
          },
          "resume": {
            "callback": "%container.resume%",
            "parameters": [
              "%resource%"
            ]
          },
          "shutdown": {
            "callback": "%container.shutdown%",
            "parameters": [
              "%resource%"
            ]
          },
          "init": {
            "statements": [
              "%resource% = $ALLOC(%resource%);"
            ]
          },
          "free": {
            "statements": [
              "$FREE(%resource%);"
            ]
          },
          "y_ret": {
            "condition": [
              "%ret% == 0"
            ]
          },
          "n_ret": {
            "condition": [
              "%ret% != 0"
            ]
          }
        }
      },
      "io_instance": {
        "labels": {
          "container": {
            "container": true
          },
          "resource": {
            "resource": true
          },
          "callback": {
            "callback": true
          },
          "ret": {
            "signature": "int a",
            "value": "1"
          }
        },
        "process": "(!register).<init>.{main}",
        "actions": {
          "main": {
            "comment": "Begin artificial pattern scenario for IO drivers.",
            "process": "[probe].(<y_ret>.{call} | <n_ret>.{main}) | <free>.(deregister)"
          },
          "call": {
            "comment": "We are at opened state, call the rest callbacks.",
            "process": "[callback].{call} | [release].{main}"
          },
          "register": {
            "parameters": [
              "%container%"
            ]
          },
          "deregister": {
            "condition": [
              "%container% == $ARG1"
            ],
            "parameters": [
              "%container%"
            ]
          },
          "callback": {
            "callback": "%callback%",
            "parameters": [
              "%resource%"
            ]
          },
          "release": {
            "callback": "%container.release%",
            "parameters": [
              "%resource%"
            ]
          },
          "probe": {
            "callback": "%container.probe%",
            "parameters": [
              "%resource%"
            ],
            "callback return value": "%ret%",
            "post-call": [
              "%ret% = ldv_filter_err_code(%ret%);"
            ]
          },
          "init": {
            "comment": "Alloc memory for common callback arguments.",
            "statements": [
              "%resource% = $ALLOC(%resource%);"
            ]
          },
          "free": {
            "comment": "Free memory for common callback arguments.",
            "statements": [
              "$FREE(%resource%);"
            ]
          },
          "y_ret": {
            "comment": "Open/Probe has been successful.",
            "condition": [
              "%ret% == 0"
            ]
          },
          "n_ret": {
            "comment": "Open/Probe has failed.",
            "condition": [
              "%ret% != 0"
            ]
          }
        }
      }
    }
  }
}
